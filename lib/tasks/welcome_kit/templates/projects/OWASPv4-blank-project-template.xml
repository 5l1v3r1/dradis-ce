<dradis-template><name>OWASPv4 Blank Project Template</name><nodes><node><id>3212</id><label>Scope</label><parent-id/><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes><note><id>2975</id><author>admin@securityroots.com</author><category-id>6</category-id><text><![CDATA[#[Title]#
URLs and credentials

#[URLs]#
* http://snorby.orb
* https://testme.insecure.com

#[Credentials]#
|_. Username |_. Password |_. Role |
| admin | @dm!n | administrator |
| testuser | t3stu$er | author |]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458766488</created_at></activity></activities></note></notes><evidence></evidence><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458765489</created_at></activity></activities></node><node><id>3213</id><label>Conclusions</label><parent-id/><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes><note><id>2976</id><author>admin@securityroots.com</author><category-id>1</category-id><text><![CDATA[#[Title]#
Conclusions

#[Type]#
Conclusions

#[Description]#
Describe the conclusions and summarize the findings in this project. All content in this field will export into the Conclusions section of the report template. 

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris aliquet accumsan mi, quis sagittis metus posuere quis. In pharetra condimentum nulla, vel auctor sapien. Maecenas sed ornare augue. In purus quam, dictum at ante at, finibus commodo ligula. Vestibulum at diam in lacus eleifend molestie et eget risus. 

Fusce sit amet blandit dolor. In facilisis molestie felis, in condimentum quam maximus sed. Donec ut sodales ipsum. Praesent condimentum venenatis quam, tristique rutrum mi elementum et. Aliquam pulvinar eget mi vel feugiat. Mauris aliquet id turpis eu imperdiet. Nam venenatis arcu eros, id sollicitudin sem porttitor at.

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458766622</created_at></activity></activities></note></notes><evidence></evidence><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458765535</created_at></activity></activities></node><node><id>3092</id><label>Uploaded files</label><parent-id/><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence></evidence><activities></activities></node><node><id>3093</id><label>Information Gathering</label><parent-id/><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458177630</created_at></activity></activities></node><node><id>3094</id><label>OTG-INFO-001</label><parent-id>3093</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>7983</id><author>admin@securityroots.com</author><issue-id>2864</issue-id><content><![CDATA[#[Description]#
bc. sample evidence output]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457655230</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181081</created_at></activity></activities></node><node><id>3095</id><label>OTG-INFO-002</label><parent-id>3093</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>7984</id><author>admin@securityroots.com</author><issue-id>2865</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457685531</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457685646</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181091</created_at></activity></activities></node><node><id>3096</id><label>OTG-INFO-003</label><parent-id>3093</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>7985</id><author>admin@securityroots.com</author><issue-id>2866</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457685502</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457685618</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181105</created_at></activity></activities></node><node><id>3097</id><label>OTG-INFO-004</label><parent-id>3093</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>7986</id><author>admin@securityroots.com</author><issue-id>2867</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457685576</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457685652</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181102</created_at></activity></activities></node><node><id>3098</id><label>OTG-INFO-005</label><parent-id>3093</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>7987</id><author>admin@securityroots.com</author><issue-id>2868</issue-id><content><![CDATA[#[Description]#
bc. sample evidence output]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457685509</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457685715</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181112</created_at></activity></activities></node><node><id>3099</id><label>OTG-INFO-006</label><parent-id>3093</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>7988</id><author>admin@securityroots.com</author><issue-id>2869</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457685519</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457685641</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181121</created_at></activity></activities></node><node><id>3100</id><label>Config Deploy Mgmt Testing</label><parent-id/><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458176252</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458177448</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458177607</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458177638</created_at></activity></activities></node><node><id>3101</id><label>OTG-CONFIG-001</label><parent-id>3100</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>7989</id><author>admin@securityroots.com</author><issue-id>2870</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457685338</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457685572</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181257</created_at></activity></activities></node><node><id>3102</id><label>OTG-CONFIG-002</label><parent-id>3100</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>7990</id><author>admin@securityroots.com</author><issue-id>2871</issue-id><content><![CDATA[#[Description]#
bc. sample evidence output]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457685491</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457685613</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181271</created_at></activity></activities></node><node><id>3103</id><label>OTG-CONFIG-003</label><parent-id>3100</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>7991</id><author>admin@securityroots.com</author><issue-id>2872</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457685347</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457685573</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181285</created_at></activity></activities></node><node><id>3104</id><label>OTG-CONFIG-004</label><parent-id>3100</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>7992</id><author>admin@securityroots.com</author><issue-id>2873</issue-id><content><![CDATA[#[Description]#
bc. sample evidence output]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457685699</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457685738</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181304</created_at></activity></activities></node><node><id>3105</id><label>OTG-CONFIG-005</label><parent-id>3100</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>7993</id><author>admin@securityroots.com</author><issue-id>2874</issue-id><content><![CDATA[#[Description]#
bc. sample evidence output]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457685566</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457685651</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181311</created_at></activity></activities></node><node><id>3106</id><label>OTG-CONFIG-006</label><parent-id>3100</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>7994</id><author>admin@securityroots.com</author><issue-id>2875</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457685347</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457685573</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181321</created_at></activity></activities></node><node><id>3107</id><label>OTG-CONFIG-007</label><parent-id>3100</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>7995</id><author>admin@securityroots.com</author><issue-id>2876</issue-id><content><![CDATA[#[Description]#
bc. sample evidence output]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457685630</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457685709</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181334</created_at></activity></activities></node><node><id>3108</id><label>OTG-CONFIG-008</label><parent-id>3100</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>7996</id><author>admin@securityroots.com</author><issue-id>2877</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457685335</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457685572</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181334</created_at></activity></activities></node><node><id>3109</id><label>Identity Management Testing</label><parent-id/><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458177643</created_at></activity></activities></node><node><id>3110</id><label>OTG-IDENT-001</label><parent-id>3109</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>7997</id><author>admin@securityroots.com</author><issue-id>2878</issue-id><content><![CDATA[#[Description]#
bc. sample evidence output]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457684964</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457685101</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181527</created_at></activity></activities></node><node><id>3111</id><label>OTG-IDENT-002</label><parent-id>3109</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>7998</id><author>admin@securityroots.com</author><issue-id>2879</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457684973</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457685571</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181538</created_at></activity></activities></node><node><id>3112</id><label>OTG-IDENT-003</label><parent-id>3109</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>7999</id><author>admin@securityroots.com</author><issue-id>2880</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457685005</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457685300</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181547</created_at></activity></activities></node><node><id>3113</id><label>OTG-ERR-001</label><parent-id>3110</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181551</created_at></activity></activities></node><node><id>3114</id><label>OTG-ERR-002</label><parent-id>3110</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181551</created_at></activity></activities></node><node><id>3115</id><label>Authentication Testing</label><parent-id/><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457733006</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458177651</created_at></activity></activities></node><node><id>3116</id><label>OTG-AUTHN-001</label><parent-id>3115</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8000</id><author>admin@securityroots.com</author><issue-id>2881</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457734237</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457734444</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181694</created_at></activity></activities></node><node><id>3117</id><label>OTG-AUTHN-002</label><parent-id>3115</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8001</id><author>admin@securityroots.com</author><issue-id>2882</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457734144</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457734380</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181705</created_at></activity></activities></node><node><id>3118</id><label>OTG-AUTHN-003</label><parent-id>3115</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8002</id><author>admin@securityroots.com</author><issue-id>2883</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457734155</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457734388</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181703</created_at></activity></activities></node><node><id>3119</id><label>OTG-AUTHN-004</label><parent-id>3115</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8003</id><author>admin@securityroots.com</author><issue-id>2884</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457734184</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457734391</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181713</created_at></activity></activities></node><node><id>3120</id><label>OTG-AUTHN-005</label><parent-id>3115</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8004</id><author>admin@securityroots.com</author><issue-id>2885</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457734244</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457734503</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181721</created_at></activity></activities></node><node><id>3121</id><label>Authorization Testing</label><parent-id/><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457733012</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458177655</created_at></activity></activities></node><node><id>3122</id><label>OTG-AUTHZ-001</label><parent-id>3121</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8005</id><author>admin@securityroots.com</author><issue-id>2891</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735145</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457735373</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181961</created_at></activity></activities></node><node><id>3123</id><label>OTG-AUTHZ-002</label><parent-id>3121</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8006</id><author>admin@securityroots.com</author><issue-id>2892</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735160</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457735430</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181964</created_at></activity></activities></node><node><id>3124</id><label>OTG-AUTHZ-003</label><parent-id>3121</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8007</id><author>admin@securityroots.com</author><issue-id>2893</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735175</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457735434</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181968</created_at></activity></activities></node><node><id>3125</id><label>Session Management Testing</label><parent-id/><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457733017</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458177658</created_at></activity></activities></node><node><id>3126</id><label>OTG-SESS-001</label><parent-id>3125</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8008</id><author>admin@securityroots.com</author><issue-id>2895</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735199</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457735443</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182007</created_at></activity></activities></node><node><id>3127</id><label>OTG-AUTHN-006</label><parent-id>3115</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8009</id><author>admin@securityroots.com</author><issue-id>2886</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457734253</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457734519</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181732</created_at></activity></activities></node><node><id>3128</id><label>OTG-AUTHN-007</label><parent-id>3115</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8010</id><author>admin@securityroots.com</author><issue-id>2887</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457734310</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457734529</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181748</created_at></activity></activities></node><node><id>3129</id><label>OTG-AUTHN-008</label><parent-id>3115</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8011</id><author>admin@securityroots.com</author><issue-id>2888</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457734311</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457734540</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181752</created_at></activity></activities></node><node><id>3130</id><label>OTG-AUTHN-009</label><parent-id>3115</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8012</id><author>admin@securityroots.com</author><issue-id>2889</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457734319</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457734623</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181766</created_at></activity></activities></node><node><id>3131</id><label>OTG-AUTHN-010</label><parent-id>3115</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8013</id><author>admin@securityroots.com</author><issue-id>2890</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457734020</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457734434</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181799</created_at></activity></activities></node><node><id>3132</id><label>OTG-AUTHZ-004</label><parent-id>3121</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8014</id><author>admin@securityroots.com</author><issue-id>2894</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735185</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457735438</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458181973</created_at></activity></activities></node><node><id>3133</id><label>OTG-SESS-002</label><parent-id>3125</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8015</id><author>admin@securityroots.com</author><issue-id>2896</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735209</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457735446</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182046</created_at></activity></activities></node><node><id>3134</id><label>OTG-SESS-003</label><parent-id>3125</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8016</id><author>admin@securityroots.com</author><issue-id>2897</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735246</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457735451</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182053</created_at></activity></activities></node><node><id>3135</id><label>OTG-SESS-004</label><parent-id>3125</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8017</id><author>admin@securityroots.com</author><issue-id>2898</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735252</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457735477</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182065</created_at></activity></activities></node><node><id>3136</id><label>OTG-SESS-005</label><parent-id>3125</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8018</id><author>admin@securityroots.com</author><issue-id>2899</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735261</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457735459</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182074</created_at></activity></activities></node><node><id>3137</id><label>OTG-SESS-006</label><parent-id>3125</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8019</id><author>admin@securityroots.com</author><issue-id>2900</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735284</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457735474</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182083</created_at></activity></activities></node><node><id>3138</id><label>OTG-SESS-007</label><parent-id>3125</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8020</id><author>admin@securityroots.com</author><issue-id>2901</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735362</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457735467</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182083</created_at></activity></activities></node><node><id>3139</id><label>OTG-SESS-008</label><parent-id>3125</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8021</id><author>admin@securityroots.com</author><issue-id>2902</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735359</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457735471</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182091</created_at></activity></activities></node><node><id>3140</id><label>Input Validation Testing</label><parent-id/><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457733029</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458177667</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458714721</created_at></activity></activities></node><node><id>3141</id><label>OTG-INPVAL-001</label><parent-id>3140</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8022</id><author>admin@securityroots.com</author><issue-id>2903</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735728</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457735929</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182629</created_at></activity></activities></node><node><id>3142</id><label>OTG-INPVAL-002</label><parent-id>3140</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8023</id><author>admin@securityroots.com</author><issue-id>2904</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735735</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457735934</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182632</created_at></activity></activities></node><node><id>3143</id><label>OTG-INPVAL-003</label><parent-id>3140</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8024</id><author>admin@securityroots.com</author><issue-id>2905</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735745</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457735938</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182643</created_at></activity></activities></node><node><id>3144</id><label>OTG-INPVAL-004</label><parent-id>3140</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8025</id><author>admin@securityroots.com</author><issue-id>2906</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735755</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457735943</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182656</created_at></activity></activities></node><node><id>3145</id><label>OTG-INPVAL-005</label><parent-id>3140</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8026</id><author>admin@securityroots.com</author><issue-id>2907</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735764</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457735953</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182661</created_at></activity></activities></node><node><id>3146</id><label>OTG-INPVAL-006</label><parent-id>3140</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8027</id><author>admin@securityroots.com</author><issue-id>2908</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735780</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457735962</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182678</created_at></activity></activities></node><node><id>3147</id><label>OTG-INPVAL-007</label><parent-id>3140</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8028</id><author>admin@securityroots.com</author><issue-id>2909</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735791</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457736009</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182778</created_at></activity></activities></node><node><id>3148</id><label>OTG-INPVAL-008</label><parent-id>3140</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8029</id><author>admin@securityroots.com</author><issue-id>2910</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735802</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457735976</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182723</created_at></activity></activities></node><node><id>3149</id><label>OTG-INPVAL-009</label><parent-id>3140</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8030</id><author>admin@securityroots.com</author><issue-id>2911</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735815</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457735981</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182729</created_at></activity></activities></node><node><id>3150</id><label>OTG-INPVAL-010</label><parent-id>3140</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8031</id><author>admin@securityroots.com</author><issue-id>2912</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735847</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457735985</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182736</created_at></activity></activities></node><node><id>3151</id><label>OTG-INPVAL-011</label><parent-id>3140</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8032</id><author>admin@securityroots.com</author><issue-id>2913</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735855</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457735989</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182748</created_at></activity></activities></node><node><id>3152</id><label>OTG-INPVAL-012</label><parent-id>3140</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8033</id><author>admin@securityroots.com</author><issue-id>2914</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735863</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457735993</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182752</created_at></activity></activities></node><node><id>3153</id><label>Local File Inclusion</label><parent-id>3152</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8034</id><author>admin@securityroots.com</author><issue-id>2915</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736229</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457736598</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182765</created_at></activity></activities></node><node><id>3154</id><label>Remote File Inclusion</label><parent-id>3152</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8035</id><author>admin@securityroots.com</author><issue-id>2916</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736407</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457736662</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182765</created_at></activity></activities></node><node><id>3155</id><label>OTG-INPVAL-013</label><parent-id>3140</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8036</id><author>admin@securityroots.com</author><issue-id>2917</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736416</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457736671</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182852</created_at></activity></activities></node><node><id>3156</id><label>OTG-INPVAL-014</label><parent-id>3140</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8037</id><author>admin@securityroots.com</author><issue-id>2918</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736435</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457736680</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182801</created_at></activity></activities></node><node><id>3157</id><label>Heap overflow</label><parent-id>3156</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8038</id><author>admin@securityroots.com</author><issue-id>2919</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736442</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457736689</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182810</created_at></activity></activities></node><node><id>3158</id><label>Stack overflow</label><parent-id>3156</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8039</id><author>admin@securityroots.com</author><issue-id>2920</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736445</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457736699</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182809</created_at></activity></activities></node><node><id>3159</id><label>Format string</label><parent-id>3156</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8040</id><author>admin@securityroots.com</author><issue-id>2921</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736452</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457736706</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182816</created_at></activity></activities></node><node><id>3160</id><label>OTG-INPVAL-015</label><parent-id>3140</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8041</id><author>admin@securityroots.com</author><issue-id>2922</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736479</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457736714</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182822</created_at></activity></activities></node><node><id>3161</id><label>OTG-INPVAL-016</label><parent-id>3140</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8042</id><author>admin@securityroots.com</author><issue-id>2923</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736485</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457736721</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458182829</created_at></activity></activities></node><node><id>3162</id><label>Error Handling</label><parent-id/><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457733033</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458177920</created_at></activity></activities></node><node><id>3163</id><label>OTG-ERR-001</label><parent-id>3162</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8043</id><author>admin@securityroots.com</author><issue-id>2924</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736490</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457736729</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458183087</created_at></activity></activities></node><node><id>3164</id><label>OTG-ERR-002</label><parent-id>3162</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8044</id><author>admin@securityroots.com</author><issue-id>2925</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736497</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457736737</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458183089</created_at></activity></activities></node><node><id>3165</id><label>Cryptography</label><parent-id/><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457733037</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458177924</created_at></activity></activities></node><node><id>3166</id><label>OTG-CRYPST-001</label><parent-id>3165</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8045</id><author>admin@securityroots.com</author><issue-id>2926</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736503</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457736744</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458183188</created_at></activity></activities></node><node><id>3167</id><label>OTG-CRYPST-002</label><parent-id>3165</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8046</id><author>admin@securityroots.com</author><issue-id>2927</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737193</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457737489</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458183188</created_at></activity></activities></node><node><id>3168</id><label>OTG-CRYPST-003</label><parent-id>3165</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8047</id><author>admin@securityroots.com</author><issue-id>2928</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737219</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457737493</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458183200</created_at></activity></activities></node><node><id>3169</id><label>Business Logic Testing</label><parent-id/><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457733041</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458177926</created_at></activity></activities></node><node><id>3170</id><label>OTG-BUSLOGIC-001</label><parent-id>3169</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8048</id><author>admin@securityroots.com</author><issue-id>2929</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737229</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457737497</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458183202</created_at></activity></activities></node><node><id>3171</id><label>OTG-BUSLOGIC-002</label><parent-id>3169</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8049</id><author>admin@securityroots.com</author><issue-id>2930</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737279</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457737502</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458183214</created_at></activity></activities></node><node><id>3172</id><label>OTG-BUSLOGIC-006</label><parent-id>3169</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8050</id><author>admin@securityroots.com</author><issue-id>2931</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737296</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457737508</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458183217</created_at></activity></activities></node><node><id>3173</id><label>OTG-BUSLOGIC-007</label><parent-id>3169</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8051</id><author>admin@securityroots.com</author><issue-id>2932</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737307</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457737513</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458183220</created_at></activity></activities></node><node><id>3174</id><label>OTG-BUSLOGIC-008</label><parent-id>3169</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8052</id><author>admin@securityroots.com</author><issue-id>2933</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737341</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457737514</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458183231</created_at></activity></activities></node><node><id>3175</id><label>OTG-BUSLOGIC-009</label><parent-id>3169</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8053</id><author>admin@securityroots.com</author><issue-id>2934</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737346</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457737524</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458183243</created_at></activity></activities></node><node><id>3176</id><label>Client Side Testing</label><parent-id/><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457733045</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458177941</created_at></activity></activities></node><node><id>3177</id><label>OTG-CLIENT-001</label><parent-id>3176</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8054</id><author>admin@securityroots.com</author><issue-id>2935</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737349</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457737525</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458183246</created_at></activity></activities></node><node><id>3178</id><label>OTG-CLIENT-002</label><parent-id>3176</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8055</id><author>admin@securityroots.com</author><issue-id>2936</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737356</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457737529</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458183257</created_at></activity></activities></node><node><id>3179</id><label>OTG-CLIENT-003</label><parent-id>3176</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8056</id><author>admin@securityroots.com</author><issue-id>2937</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737364</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457737533</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458183260</created_at></activity></activities></node><node><id>3180</id><label>OTG-CLIENT-004</label><parent-id>3176</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8057</id><author>admin@securityroots.com</author><issue-id>2938</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737399</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457737534</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458183262</created_at></activity></activities></node><node><id>3181</id><label>OTG-CLIENT-005</label><parent-id>3176</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8058</id><author>admin@securityroots.com</author><issue-id>2939</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737744</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457737832</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458183265</created_at></activity></activities></node><node><id>3182</id><label>OTG-CLIENT-006</label><parent-id>3176</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8059</id><author>admin@securityroots.com</author><issue-id>2940</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737753</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457737832</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458183277</created_at></activity></activities></node><node><id>3183</id><label>OTG-CLIENT-007</label><parent-id>3176</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8060</id><author>admin@securityroots.com</author><issue-id>2941</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737761</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457737834</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458183280</created_at></activity></activities></node><node><id>3184</id><label>OTG-CLIENT-008</label><parent-id>3176</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8061</id><author>admin@securityroots.com</author><issue-id>2942</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737768</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457737844</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458183296</created_at></activity></activities></node><node><id>3185</id><label>OTG-CLIENT-009</label><parent-id>3176</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8062</id><author>admin@securityroots.com</author><issue-id>2943</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737776</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457737874</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458183301</created_at></activity></activities></node><node><id>3186</id><label>OTG-CLIENT-010</label><parent-id>3176</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8063</id><author>admin@securityroots.com</author><issue-id>2944</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737785</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457737848</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458183313</created_at></activity></activities></node><node><id>3187</id><label>OTG-CLIENT-011</label><parent-id>3176</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8064</id><author>admin@securityroots.com</author><issue-id>2945</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737791</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457737851</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458183316</created_at></activity></activities></node><node><id>3188</id><label>OTG-CLIENT-012</label><parent-id>3176</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8065</id><author>admin@securityroots.com</author><issue-id>2946</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737798</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457737858</created_at></activity></activities></evidence></evidence><activities><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458183328</created_at></activity></activities></node><node><id>3189</id><label>OTG-INFO-007</label><parent-id>3093</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8066</id><author>admin@securityroots.com</author><issue-id>2947</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458705416</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458705535</created_at></activity></activities></evidence></evidence><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458705287</created_at></activity></activities></node><node><id>3190</id><label>OTG-INFO-008</label><parent-id>3093</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8067</id><author>admin@securityroots.com</author><issue-id>2948</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458705839</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458705959</created_at></activity></activities></evidence></evidence><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458705542</created_at></activity></activities></node><node><id>3191</id><label>OTG-INFO-009</label><parent-id>3093</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8068</id><author>admin@securityroots.com</author><issue-id>2949</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458706155</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458707750</created_at></activity></activities></evidence></evidence><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458705974</created_at></activity></activities></node><node><id>3192</id><label>OTG-INFO-010</label><parent-id>3093</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8069</id><author>admin@securityroots.com</author><issue-id>2950</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458713037</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458713221</created_at></activity></activities></evidence></evidence><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458706546</created_at></activity></activities></node><node><id>3193</id><label>OTG-IDENT-004</label><parent-id>3109</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8070</id><author>admin@securityroots.com</author><issue-id>2951</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458713462</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458713490</created_at></activity></activities></evidence></evidence><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458713371</created_at></activity></activities></node><node><id>3194</id><label>OTG-IDENT-005</label><parent-id>3109</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8071</id><author>admin@securityroots.com</author><issue-id>2952</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458713524</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458713555</created_at></activity></activities></evidence></evidence><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458713473</created_at></activity></activities></node><node><id>3195</id><label>Oracle Testing</label><parent-id>3194</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8072</id><author>admin@securityroots.com</author><issue-id>2953</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458713987</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458714143</created_at></activity></activities></evidence></evidence><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458713808</created_at></activity></activities></node><node><id>3196</id><label>MySQL Testing</label><parent-id>3145</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8073</id><author>admin@securityroots.com</author><issue-id>2954</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458714056</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458714147</created_at></activity></activities></evidence></evidence><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458714016</created_at></activity></activities></node><node><id>3197</id><label>SQL Server Testing</label><parent-id>3145</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8074</id><author>admin@securityroots.com</author><issue-id>2955</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458714159</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458714286</created_at></activity></activities></evidence></evidence><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458714106</created_at></activity></activities></node><node><id>3198</id><label>Testing PostgreSQL</label><parent-id>3145</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8075</id><author>admin@securityroots.com</author><issue-id>2956</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458714422</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458714504</created_at></activity></activities></evidence></evidence><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458714330</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458714365</created_at></activity></activities></node><node><id>3199</id><label>MS Access Testing</label><parent-id>3145</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8076</id><author>admin@securityroots.com</author><issue-id>2957</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458714502</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458714553</created_at></activity></activities></evidence></evidence><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458714431</created_at></activity></activities></node><node><id>3200</id><label>Testing NoSQL injection</label><parent-id>3145</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8077</id><author>admin@securityroots.com</author><issue-id>2958</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458714523</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458714583</created_at></activity></activities></evidence></evidence><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458714447</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458714630</created_at></activity></activities></node><node><id>3201</id><label>OTG-BUSLOGIC-003</label><parent-id>3169</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8078</id><author>admin@securityroots.com</author><issue-id>2959</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458714956</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458715026</created_at></activity></activities></evidence></evidence><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458714840</created_at></activity></activities></node><node><id>3202</id><label>OTG-BUSLOGIC-004</label><parent-id>3169</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8079</id><author>admin@securityroots.com</author><issue-id>2960</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458714968</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458715078</created_at></activity></activities></evidence></evidence><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458714873</created_at></activity></activities></node><node><id>3203</id><label>OTG-BUSLOGIC-005</label><parent-id>3169</parent-id><position>0</position><properties><![CDATA[{
}]]></properties><type-id>0</type-id><notes></notes><evidence><evidence><id>8080</id><author>admin@securityroots.com</author><issue-id>2961</issue-id><content><![CDATA[#[Description]#
bc. Placeholder Evidence content.]]></content><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458714975</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458715079</created_at></activity></activities></evidence></evidence><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458714898</created_at></activity></activities></node></nodes><issues><issue><id>2864</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Conduct Search Engine Discovery and Reconnaissance for Information Leakage

#[Control]#
OTG-INFO-001

#[Status]#
Unknown | Pass | Fail

#[Order]#
1

#[Summary]#
There are direct and indirect elements to search engine discovery and reconnaissance. Direct methods relate to searching the indexes and the associated content from caches. Indirect methods relate to gleaning sensitive design and configuration information by searching forums, newsgroups, and tendering websites.


Once a search engine robot has completed crawling, it commences indexing the web page based on tags and associated attributes, such as <TITLE>, in order to return the relevant search results [1]. If the robots.txt file is not updated during the lifetime of the web site, and inline HTML meta tags that instruct robots not to index content have not been used, then it is possible for indexes to contain web content not intended to be included in by the owners. Website owners may use the previously mentioned robots.txt, HTML meta tags, authentication, and tools provided by search engines to remove such content.

#[References]#
https://www.owasp.org/index.php/Conduct_search_engine_discovery/reconnaissance_for_information_leakage_(OTG-INFO-001)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457655057</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457689425</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458716791</created_at></activity></activities></issue><issue><id>2865</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Fingerprint Web Server

#[Control]#
OTG-INFO-002 

#[Status]#
Unknown | Pass | Fail

#[Order]#
2

#[Summary]#
Web server fingerprinting is a critical task for the penetration tester. Knowing the version and type of a running web server allows testers to determine known vulnerabilities and the appropriate exploits to use during testing.


There are several different vendors and versions of web servers on the market today. Knowing the type of web server that is being tested significantly helps in the testing process and can also change the course of the test. This information can be derived by sending the web server specific commands and analyzing the output, as each version of web server software may respond differently to these commands. By knowing how each type of web server responds to specific commands and keeping this information in a web server fingerprint database, a penetration tester can send these commands to the web server, analyze the response, and compare it to the database of known signatures. Please note that it usually takes several different commands to accurately identify the web server, as different versions may react similarly to the same command. Rarely do different versions react the same to all HTTP commands. So by sending several different commands, the tester can increase the accuracy of their guess.

#[References]#
https://www.owasp.org/index.php/Fingerprint_Web_Server_(OTG-INFO-002)


]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457684315</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457689390</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458716909</created_at></activity></activities></issue><issue><id>2866</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Review Webserver Metafiles for Information Leakage

#[Control]#
OTG-INFO-003 

#[Status]#
Unknown | Pass | Fail

#[Order]#
3

#[Summary]#
Test the robots.txt file for information leakage of the web application's directory or folder path(s). Furthermore, the list of directories that are to be avoided by Spiders, Robots, or Crawlers can also be created as a dependency for Map execution paths through application (OTG-INFO-007)


#[References]#
https://www.owasp.org/index.php/Review_Webserver_Metafiles_for_Information_Leakage_(OTG-INFO-003)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457684337</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457689345</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458717348</created_at></activity></activities></issue><issue><id>2867</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Enumerate Applications on Webserver

#[Control]#
OTG-INFO-004

#[Status]#
Unknown | Pass | Fail

#[Order]#
4

#[Summary]#
A paramount step in testing for web application vulnerabilities is to find out which particular applications are hosted on a web server. Many applications have known vulnerabilities and known attack strategies that can be exploited in order to gain remote control or to exploit data. In addition, many applications are often misconfigured or not updated, due to the perception that they are only used "internally" and therefore no threat exists.
With the proliferation of virtual web servers, the traditional 1:1-type relationship between an IP address and a web server is losing much of its original significance. It is not uncommon to have multiple web sites or applications whose symbolic names resolve to the same IP address. This scenario is not limited to hosting environments, but also applies to ordinary corporate environments as well.
Security professionals are sometimes given a set of IP addresses as a target to test. It is arguable that this scenario is more akin to a penetration test-type engagement, but in any case it is expected that such an assignment would test all web applications accessible through this target. The problem is that the given IP address hosts an HTTP service on port 80, but if a tester should access it by specifying the IP address (which is all they know) it reports "No web server configured at this address" or a similar message. But that system could "hide" a number of web applications, associated to unrelated symbolic (DNS) names. Obviously, the extent of the analysis is deeply affected by the tester tests all applications or only tests the applications that they are aware of.
Sometimes, the target specification is richer. The tester may be given a list of IP addresses and their corresponding symbolic names. Nevertheless, this list might convey partial information, i.e., it could omit some symbolic names and the client may not even being aware of that (this is more likely to happen in large organizations).
Other issues affecting the scope of the assessment are represented by web applications published at non-obvious URLs (e.g., http://www.example.com/some-strange-URL), which are not referenced elsewhere. This may happen either by error (due to misconfigurations), or intentionally (for example, unadvertised administrative interfaces).
To address these issues, it is necessary to perform web application discovery.

#[References]#
https://www.owasp.org/index.php/Enumerate_Applications_on_Webserver_(OTG-INFO-004)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457684363</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457689416</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458716805</created_at></activity></activities></issue><issue><id>2868</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Review Webpage Comments and Metadata for Information Leakage

#[Control]#
OTG-INFO-005 

#[Status]#
Unknown | Pass | Fail

#[Order]#
5

#[Summary]#
It is very common, and even recommended, for programmers to include detailed comments and metadata on their source code. However, comments and metadata included into the HTML code might reveal internal information that should not be available to potential attackers. Comments and metadata review should be done in order to determine if any information is being leaked.

#[References]#
https://www.owasp.org/index.php/Review_webpage_comments_and_metadata_for_information_leakage_(OTG-INFO-005)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457684380</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457689362</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458717332</created_at></activity></activities></issue><issue><id>2869</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Identify application entry points

#[Control]#
OTG-INFO-006 

#[Status]#
Unknown | Pass | Fail

#[Order]#
6

#[Summary]#
Enumerating the application and its attack surface is a key precursor before any thorough testing can be undertaken, as it allows the tester to identify likely areas of weakness. This section aims to help identify and map out areas within the application that should be investigated once enumeration and mapping have been completed.

#[References]#
https://www.owasp.org/index.php/Identify_application_entry_points_(OTG-INFO-006)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457684401</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457689372</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458716896</created_at></activity></activities></issue><issue><id>2947</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Map execution paths through application

#[Control]#
OTG-INFO-007

#[Status]#
Unknown | Pass | Fail

#[Order]#
7

#[Summary]#
Before commencing security testing, understanding the structure of the application is paramount. Without a thorough understanding of the layout of the application, it is unlkely that it will be tested thoroughly.

#[References]#
https://www.owasp.org/index.php/Map_execution_paths_through_application_(OTG-INFO-007)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458705346</created_at></activity></activities></issue><issue><id>2948</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Fingerprint Web Application Framework

#[Control]#
OTG-INFO-008

#[Status]#
Unknown | Pass | Fail

#[Order]#
8

#[Summary]#
Web framework[*] fingerprinting is an important subtask of the information gathering process. Knowing the type of framework can automatically give a great advantage if such a framework has already been tested by the penetration tester. It is not only the known vulnerabilities in unpatched versions but specific misconfigurations in the framework and known file structure that makes the fingerprinting process so important.
Several different vendors and versions of web frameworks are widely used. Information about it significantly helps in the testing process, and can also help in changing the course of the test. Such information can be derived by careful analysis of certain common locations. Most of the web frameworks have several markers in those locations which help an attacker to spot them. This is basically what all automatic tools do, they look for a marker from a predefined location and then compare it to the database of known signatures. For better accuracy several markers are usually used.
[*] Please note that no differentiation has been made between Web Application Frameworks (WAF) and Content Management Systems (CMS). This has been done to make it convenient to fingerprint both of them in one chapter. Furthermore, both categories are referenced as web frameworks.

#[References]#
https://www.owasp.org/index.php/Fingerprint_Web_Application_Framework_(OTG-INFO-008)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458705580</created_at></activity></activities></issue><issue><id>2949</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Fingerprint Web Application

#[Control]#
OTG-INFO-009

#[Status]#
Unknown | Pass | Fail

#[Order]#
9

#[Summary]#
There is nothing new under the sun, and nearly every web application that one may think of developing has already been developed. With the vast number of free and open source software projects that are actively developed and deployed around the world, it is very likely that an application security test will face a target site that is entirely or partly dependent on these well known applications (e.g. Wordpress, phpBB, Mediawiki, etc). Knowing the web application components that are being tested significantly helps in the testing process and will also drastically reduce the effort required during the test. These well known web applications have known HTML headers, cookies, and directory structures that can be enumerated to identify the application.

#[References]#
https://www.owasp.org/index.php/Fingerprint_Web_Application_(OTG-INFO-009)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458706002</created_at></activity></activities></issue><issue><id>2950</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Map Application Architecture 

#[Control]#
OTG-INFO-010

#[Status]#
Unknown | Pass | Fail

#[Order]#
10

#[Summary]#
The complexity of interconnected and heterogeneous web server infrastructure can include hundreds of web applications and makes configuration management and review a fundamental step in testing and deploying every single application. In fact it takes only a single vulnerability to undermine the security of the entire infrastructure, and even small and seemingly unimportant problems may evolve into severe risks for another application on the same server.
To address these problems, it is of utmost importance to perform an in-depth review of configuration and known security issues. Before performing an in-depth review it is necessary to map the network and application architecture. The different elements that make up the infrastructure need to be determined to understand how they interact with a web application and how they affect security.

#[References]#
https://www.owasp.org/index.php/Map_Application_Architecture_(OTG-INFO-010)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458707742</created_at></activity></activities></issue><issue><id>2870</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Test Network/Infrastructure Configuration

#[Control]#
OTG-CONFIG-001 

#[Status]#
Unknown | Pass | Fail

#[Order]#
11

#[Summary]#
The intrinsic complexity of interconnected and heterogeneous web server infrastructure, which can include hundreds of web applications, makes configuration management and review a fundamental step in testing and deploying every single application. It takes only a single vulnerability to undermine the security of the entire infrastructure, and even small and seemingly unimportant problems may evolve into severe risks for another application on the same server. In order to address these problems, it is of utmost importance to perform an in-depth review of configuration and known security issues, after having mapped the entire architecture.
Proper configuration management of the web server infrastructure is very important in order to preserve the security of the application itself. If elements such as the web server software, the back-end database servers, or the authentication servers are not properly reviewed and secured, they might introduce undesired risks or introduce new vulnerabilities that might compromise the application itself.
For example, a web server vulnerability that would allow a remote attacker to disclose the source code of the application itself (a vulnerability that has arisen a number of times in both web servers or application servers) could compromise the application, as anonymous users could use the information disclosed in the source code to leverage attacks against the application or its users.
The following steps need to be taken to test the configuration management infrastructure:

* The different elements that make up the infrastructure need to be determined in order to understand how they interact with a web application and how they affect its security.
* All the elements of the infrastructure need to be reviewed in order to make sure that they don’t contain any known vulnerabilities.
* A review needs to be made of the administrative tools used to maintain all the different elements.
* The authentication systems, need to reviewed in order to assure that they serve the needs of the application and that they cannot be manipulated by external users to leverage access.
* A list of defined ports which are required for the application should be maintained and kept under change control.

After having mapped the different elements that make up the infrastructure (see Map Network and Application Architecture) it is possible to review the configuration of each element founded and test for any known vulnerabilities.

#[References]#
https://www.owasp.org/index.php/Test_Network/Infrastructure_Configuration_(OTG-CONFIG-001)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457684470</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457689302</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458717594</created_at></activity></activities></issue><issue><id>2871</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Test Application Platform Configuration

#[Control]#
OTG-CONFIG-002 

#[Status]#
Unknown | Pass | Fail

#[Order]#
12

#[Summary]#
Proper configuration of the single elements that make up an application architecture is important in order to prevent mistakes that might compromise the security of the whole architecture.
Configuration review and testing is a critical task in creating and maintaining an architecture. This is because many different systems will be usually provided with generic configurations that might not be suited to the task they will perform on the specific site they're installed on.
While the typical web and application server installation will contain a lot of functionality (like application examples, documentation, test pages) what is not essential should be removed before deployment to avoid post-install exploitation.

#[References]#
https://www.owasp.org/index.php/Test_Application_Platform_Configuration_(OTG-CONFIG-002)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457684524</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457689332</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458717361</created_at></activity></activities></issue><issue><id>2872</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Test File Extensions Handling for Sensitive Information

#[Control]#
OTG-CONFIG-003 

#[Status]#
Unknown | Pass | Fail

#[Order]#
13

#[Summary]#
File extensions are commonly used in web servers to easily determine which technologies, languages and plugins must be used to fulfill the web request. While this behavior is consistent with RFCs and Web Standards, using standard file extensions provides the penetration tester useful information about the underlying technologies used in a web appliance and greatly simplifies the task of determining the attack scenario to be used on particular technologies. In addition, mis-configuration of web servers could easily reveal confidential information about access credentials.
Extension checking is often used to validate files to be uploaded, which can lead to unexpected results because the content is not what is expected, or because of unexpected OS file name handling.
Determining how web servers handle requests corresponding to files having different extensions may help in understanding web server behavior depending on the kind of files that are accessed. For example, it can help to understand which file extensions are returned as text or plain versus those that cause execution on the server side. The latter are indicative of technologies, languages or plugins that are used by web servers or application servers, and may provide additional insight on how the web application is engineered. For example, a “.pl” extension is usually associated with server-side Perl support. However, the file extension alone may be deceptive and not fully conclusive. For example, Perl server-side resources might be renamed to conceal the fact that they are indeed Perl related. See the next section on “web server components” for more on identifying server side technologies and components.

#[References]#
https://www.owasp.org/index.php/Test_File_Extensions_Handling_for_Sensitive_Information_(OTG-CONFIG-003)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457684540</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457689323</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458717369</created_at></activity></activities></issue><issue><id>2873</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Backup and Unreferenced Files for Sensitive Information

#[Control]#
OTG-CONFIG-004 

#[Status]#
Unknown | Pass | Fail

#[Order]#
14

#[Summary]#
While most of the files within a web server are directly handled by the server itself, it isn't uncommon to find unreferenced or forgotten files that can be used to obtain important information about the infrastructure or the credentials.
Most common scenarios include the presence of renamed old versions of modified files, inclusion files that are loaded into the language of choice and can be downloaded as source, or even automatic or manual backups in form of compressed archives. Backup files can also be generated automatically by the underlying file system the application is hosted on, a feature usually referred to as "snapshots".
All these files may grant the tester access to inner workings, back doors, administrative interfaces, or even credentials to connect to the administrative interface or the database server.
An important source of vulnerability lies in files which have nothing to do with the application, but are created as a consequence of editing application files, or after creating on-the-fly backup copies, or by leaving in the web tree old files or unreferenced files.Performing in-place editing or other administrative actions on production web servers may inadvertently leave backup copies, either generated automatically by the editor while editing files, or by the administrator who is zipping a set of files to create a backup.
It is easy to forget such files and this may pose a serious security threat to the application. That happens because backup copies may be generated with file extensions differing from those of the original files. A .tar, .zip or .gz archive that we generate (and forget...) has obviously a different extension, and the same happens with automatic copies created by many editors (for example, emacs generates a backup copy named file~ when editing file). Making a copy by hand may produce the same effect (think of copying file to file.old). The underlying file system the application is on could be making "snapshots" of your application at different points in time without your knowledge, which may also be accessible via the web, posing a similar but different "backup file" style threat to your application.
As a result, these activities generate files that are not needed by the application and may be handled differently than the original file by the web server. For example, if we make a copy of login.asp named login.asp.old, we are allowing users to download the source code of login.asp. This is because login.asp.old will be typically served as text or plain, rather than being executed because of its extension. In other words, accessing login.asp causes the execution of the server-side code of login.asp, while accessing login.asp.old causes the content of login.asp.old (which is, again, server-side code) to be plainly returned to the user and displayed in the browser. This may pose security risks, since sensitive information may be revealed.
Generally, exposing server side code is a bad idea. Not only are you unnecessarily exposing business logic, but you may be unknowingly revealing application-related information which may help an attacker (path names, data structures, etc.). Not to mention the fact that there are too many scripts with embedded username and password in clear text (which is a careless and very dangerous practice).
Other causes of unreferenced files are due to design or configuration choices when they allow diverse kind of application-related files such as data files, configuration files, log files, to be stored in file system directories that can be accessed by the web server. These files have normally no reason to be in a file system space that could be accessed via web, since they should be accessed only at the application level, by the application itself (and not by the casual user browsing around).

#[References]#
https://www.owasp.org/index.php/Review_Old,_Backup_and_Unreferenced_Files_for_Sensitive_Information_(OTG-CONFIG-004)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457684567</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457689433</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458716794</created_at></activity></activities></issue><issue><id>2874</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Enumerate Infrastructure and Application Admin Interfaces

#[Control]#
OTG-CONFIG-005 

#[Status]#
Unknown | Pass | Fail

#[Order]#
15

#[Summary]#
Administrator interfaces may be present in the application or on the application server to allow certain users to undertake privileged activities on the site. Tests should be undertaken to reveal if and how this privileged functionality can be accessed by an unauthorized or standard user. 
An application may require an administrator interface to enable a privileged user to access functionality that may make changes to how the site functions. Such changes may include:
* user account provisioning
* site design and layout
* data manipulation
* configuration changes
In many instances, such interfaces do not have sufficient controls to protect them from unauthorized access. Testing is aimed at discovering these administrator interfaces and accessing functionality intended for the privileged users.

#[References]#
https://www.owasp.org/index.php/Enumerate_Infrastructure_and_Application_Admin_Interfaces_(OTG-CONFIG-005)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457684586</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457689400</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458716869</created_at></activity></activities></issue><issue><id>2875</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Test HTTP Methods

#[Control]#
OTG-CONFIG-006 

#[Status]#
Unknown | Pass | Fail

#[Order]#
16

#[Summary]#
HTTP offers a number of methods that can be used to perform actions on the web server. Many of theses methods are designed to aid developers in deploying and testing HTTP applications. These HTTP methods can be used for nefarious purposes if the web server is misconfigured. Additionally, Cross Site Tracing (XST), a form of cross site scripting using the server's HTTP TRACE method, is examined.
While GET and POST are by far the most common methods that are used to access information provided by a web server, the Hypertext Transfer Protocol (HTTP) allows several other (and somewhat less known) methods. RFC 2616 (which describes HTTP version 1.1 which is the standard today) defines the following eight methods:
* HEAD
* GET
* POST
* PUT
* DELETE
* TRACE
* OPTIONS
* CONNECT
Some of these methods can potentially pose a security risk for a web application, as they allow an attacker to modify the files stored on the web server and, in some scenarios, steal the credentials of legitimate users. More specifically, the methods that should be disabled are the following:
* PUT: This method allows a client to upload new files on the web server. An attacker can exploit it by uploading malicious files (e.g.: an asp file that executes commands by invoking cmd.exe), or by simply using the victim's server as a file repository.
* DELETE: This method allows a client to delete a file on the web server. An attacker can exploit it as a very simple and direct way to deface a web site or to mount a DoS attack.
* CONNECT: This method could allow a client to use the web server as a proxy.
* TRACE: This method simply echoes back to the client whatever string has been sent to the server, and is used mainly for debugging purposes. This method, originally assumed harmless, can be used to mount an attack known as Cross Site Tracing, which has been discovered by Jeremiah Grossman (see links at the bottom of the page).
If an application needs one or more of these methods, such as REST Web Services (which may require PUT or DELETE), it is important to check that their usage is properly limited to trusted users and safe conditions.

#[References]#
https://www.owasp.org/index.php/Test_HTTP_Methods_(OTG-CONFIG-006)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457684606</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457689313</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458717580</created_at></activity></activities></issue><issue><id>2876</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Test HTTP Strict Transport Security

#[Control]#
OTG-CONFIG-007 

#[Status]#
Unknown | Pass | Fail

#[Order]#
17

#[Summary]#
The HTTP Strict Transport Security (HSTS) header is a mechanism that web sites have to communicate to the web browsers that all traffic exchanged with a given domain must always be sent over https, this will help protect the information from being passed over unencrypted requests.
Considering the importance of this security measure it is important to verify that the web site is using this HTTP header, in order to ensure that all the data travels encrypted from the web browser to the server.
The HTTP Strict Transport Security (HSTS) feature lets a web application to inform the browser, through the use of a special response header, that it should never establish a connection to the the specified domain servers using HTTP. Instead it should automatically establish all connection requests to access the site through HTTPS.
The HTTP strict transport security header uses two directives:

* max-age: to indicate the number of seconds that the browser should automatically convert all HTTP requests to HTTPS.
* includeSubDomains: to indicate that all web application’s sub-domains must use HTTPS.

Here's an example of the HSTS header implementation:

bc. Strict-Transport-Security: max-age=60000; includeSubDomains

The use of this header by web applications must be checked to find if the following security issues could be produced:

Attackers sniffing the network traffic and accessing the information transferred through an unencrypted channel.
Attackers exploiting a man in the middle attack because of the problem of accepting certificates that are not trusted.
Users who mistakenly entered an address in the browser putting HTTP instead of HTTPS, or users who click on a link in a web application which mistakenly indicated the http protocol.

#[References]#
https://www.owasp.org/index.php/Test_HTTP_Strict_Transport_Security_(OTG-CONFIG-007)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457684625</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457689309</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458717583</created_at></activity></activities></issue><issue><id>2877</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Test RIA cross domain policy

#[Control]#
OTG-CONFIG-008 

#[Status]#
Unknown | Pass | Fail

#[Order]#
18

#[Summary]#
Rich Internet Applications (RIA) have adopted Adobe's crossdomain.xml policy files to allow for controlled cross domain access to data and service consumption using technologies such as Oracle Java, Silverlight, and Adobe Flash. Therefore, a domain can grant remote access to its services from a different domain. However, often the policy files that describe the access restrictions are poorly configured. Poor configuration of the policy files enables Cross-site Request Forgery attacks, and may allow third parties to access sensitive data meant for the user.

#[References]#
https://www.owasp.org/index.php/Test_RIA_cross_domain_policy_(OTG-CONFIG-008)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457684722</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457689292</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458717591</created_at></activity></activities></issue><issue><id>2878</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Test Role Definitions

#[Control]#
OTG-IDENT-001 

#[Status]#
Unknown | Pass | Fail

#[Order]#
19

#[Summary]#
It is common in modern enterprises to define system roles to manage users and authorization to system resources. In most system implementations it is expected that at least two roles exist, administrators and regular users. The first representing a role that permits access to privileged and sensitive functionality and information, the second representing a role that permits access to regular business functionality and information. Well developed roles should align with business processes which are supported by the application.

It is important to remember that cold, hard authorization isn't the only way to manage access to system objects. In more trusted environments where confidentiality is not critical, softer controls such as application workflow and audit logging can support data integrity requirements while not restricting user access to functionality or creating complex role structures that are difficult to manage. Its important to consider the Goldilocks principle when role engineering, in that defining too few, broad roles (thereby exposing access to functionality users don't require) is as bad as too many, tightly tailored roles (thereby restricting access to functionality users do require).

#[References]#
https://www.owasp.org/index.php/Test_Role_Definitions_(OTG-IDENT-001)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457684785</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457689262</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458717659</created_at></activity></activities></issue><issue><id>2879</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Test User Registration Process

#[Control]#
OTG-IDENT-002 

#[Status]#
Unknown | Pass | Fail

#[Order]#
20

#[Summary]#
Some websites offer a user registration process that automates (or semi-automates) the provisioning of system access to users. The identity requirements for access vary from positive identification to none at all, depending on the security requirements of the system. Many public applications completely automate the registration and provisioning process because the size of the user base makes it impossible to manage manually. However, many corporate applications will provision users manually, so this test case may not apply.

#[References]#
https://www.owasp.org/index.php/Test_User_Registration_Process_(OTG-IDENT-002)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457684800</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457685117</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457689260</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458717722</created_at></activity></activities></issue><issue><id>2880</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Test Account Provisioning Process

#[Control]#
OTG-IDENT-003 

#[Status]#
Unknown | Pass | Fail

#[Order]#
21

#[Summary]#
The provisioning of accounts presents an opportunity for an attacker to create a valid account without application of the proper identification and authorization process.

#[References]#
https://www.owasp.org/index.php/Test_Account_Provisioning_Process_(OTG-IDENT-003)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457684815</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1457689336</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458717354</created_at></activity></activities></issue><issue><id>2951</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Account Enumeration and Guessable User Account

#[Control]#
OTG-IDENT-004

#[Status]#
Unknown | Pass | Fail

#[Order]#
22

#[Summary]#
The scope of this test is to verify if it is possible to collect a set of valid usernames by interacting with the authentication mechanism of the application. This test will be useful for brute force testing, in which the tester verifies if, given a valid username, it is possible to find the corresponding password.

Often, web applications reveal when a username exists on system, either as a consequence of mis-configuration or as a design decision. For example, sometimes, when we submit wrong credentials, we receive a message that states that either the username is present on the system or the provided password is wrong. The information obtained can be used by an attacker to gain a list of users on system. This information can be used to attack the web application, for example, through a brute force or default username and password attack.

The tester should interact with the authentication mechanism of the application to understand if sending particular requests causes the application to answer in different manners. This issue exists because the information released from web application or web server when the user provide a valid username is different than when they use an invalid one.

In some cases, a message is received that reveals if the provided credentials are wrong because an invalid username or an invalid password was used. Sometimes, testers can enumerate the existing users by sending a username and an empty password.

#[References]#
https://www.owasp.org/index.php/Testing_for_Account_Enumeration_and_Guessable_User_Account_(OTG-IDENT-004)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458713441</created_at></activity></activities></issue><issue><id>2952</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Weak or unenforced username policy

#[Control]#
OTG-IDENT-005

#[Status]#
Unknown | Pass | Fail

#[Order]#
23

#[Summary]#
User account names are often highly structured (e.g. Joe Bloggs account name is jbloggs and Fred Nurks account name is fnurks) and valid account names can easily be guessed.

#[References]#
https://www.owasp.org/index.php/Testing_for_Weak_or_unenforced_username_policy_(OTG-IDENT-005)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458713510</created_at></activity></activities></issue><issue><id>2881</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Credentials Transported over an Encrypted Channel

#[Control]#
OTG-AUTHN-001

#[Status]#
Unknown | Pass | Fail

#[Order]#
24

#[Summary]#
Testing for credentials transport means verifying that the user's authentication data are transferred via an encrypted channel to avoid being intercepted by malicious users. The analysis focuses simply on trying to understand if the data travels unencrypted from the web browser to the server, or if the web application takes the appropriate security measures using a protocol like HTTPS. The HTTPS protocol is built on TLS/SSL to encrypt the data that is transmitted and to ensure that user is being sent towards the desired site.

Clearly, the fact that traffic is encrypted does not necessarily mean that it's completely safe. The security also depends on the encryption algorithm used and the robustness of the keys that the application is using, but this particular topic will not be addressed in this section.

For a more detailed discussion on testing the safety of TLS/SSL channels refer to the chapter Testing for Weak SSL/TLS. Here, the tester will just try to understand if the data that users put in to web forms in order to log in to a web site, are transmitted using secure protocols that protect them from an attacker. 

Nowadays, the most common example of this issue is the log in page of a web application. The tester should verify that user's credentials are transmitted via an encrypted channel. In order to log in to a web site, the user usually has to fill a simple form that transmits the inserted data to the web application with the POST method. What is less obvious is that this data can be passed using the HTTP protocol, which transmits the data in a non-secure, clear text form, or using the HTTPS protocol, which encrypts the data during the transmission. To further complicate things, there is the possibility that the site has the login page accessible via HTTP (making us believe that the transmission is insecure), but then it actually sends data via HTTPS. This test is done to be sure that an attacker cannot retrieve sensitive information by simply sniffing the network with a sniffer tool.

#[References]#
https://www.owasp.org/index.php/Testing_for_Credentials_Transported_over_an_Encrypted_Channel_(OTG-AUTHN-001)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457733737</created_at></activity></activities></issue><issue><id>2882</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for default credentials

#[Control]#
OTG-AUTHN-002 

#[Status]#
Unknown | Pass | Fail

#[Order]#
25

#[Summary]#
Nowadays web applications often make use of popular open source or commercial software that can be installed on servers with minimal configuration or customization by the server administrator. Moreover, a lot of hardware appliances (i.e. network routers and database servers) offer web-based configuration or administrative interfaces.

Often these applications, once installed, are not properly configured and the default credentials provided for initial authentication and configuration are never changed. These default credentials are well known by penetration testers and, unfortunately, also by malicious attackers, who can use them to gain access to various types of applications.

Furthermore, in many situations, when a new account is created on an application, a default password (with some standard characteristics) is generated. If this password is predictable and the user does not change it on the first access, this can lead to an attacker gaining unauthorized access to the application.

The root cause of this problem can be identified as:

* Inexperienced IT personnel, who are unaware of the importance of changing default passwords on installed infrastructure components, or leave the password as default for "ease of maintenance".
* Programmers who leave back doors to easily access and test their application and later forget to remove them.
* Applications with built-in non-removable default accounts with a preset username and password.
* Applications that do not force the user to change the default credentials after the first log in.

#[References]#
https://www.owasp.org/index.php/Testing_for_default_credentials_(OTG-AUTHN-002)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457733752</created_at></activity></activities></issue><issue><id>2883</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Weak lock out mechanism

#[Control]#
OTG-AUTHN-003 

#[Status]#
Unknown | Pass | Fail

#[Order]#
26

#[Summary]#
Account lockout mechanisms are used to mitigate brute force password guessing attacks. Accounts are typically locked after 3 to 5 unsuccessful login attempts and can only be unlocked after a predetermined period of time, via a self-service unlock mechanism, or intervention by an administrator. Account lockout mechanisms require a balance between protecting accounts from unauthorized access and protecting users from being denied authorized access.

Note that this test should cover all aspects of authentication where lockout mechanisms would be appropriate, e.g. when the user is presented with security questions during forgotten password mechanisms (see Testing for Weak security question/answer (OTG-AUTHN-008)).

Without a strong lockout mechanism, the application may be susceptible to brute force attacks. After a successful brute force attack, a malicious user could have access to:

* Confidential information or data: Private sections of a web application could disclose confidential documents, users' profile data, financial information, bank details, users' relationships, etc.
* Administration panels: These sections are used by webmasters to manage (modify, delete, add) web application content, manage user provisioning, assign different privileges to the users, etc.
* Opportunities for further attacks: authenticated sections of a web application could contain vulnerabilities that are not present in the public section of the web application and could contain advanced functionality that is not available to public users.

#[References]#
https://www.owasp.org/index.php/Testing_for_Weak_lock_out_mechanism_(OTG-AUTHN-003)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457733770</created_at></activity></activities></issue><issue><id>2884</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for bypassing authentication schema

#[Control]#
OTG-AUTHN-004 

#[Status]#
Unknown | Pass | Fail

#[Order]#
27

#[Summary]#
While most applications require authentication to gain access to private information or to execute tasks, not every authentication method is able to provide adequate security. Negligence, ignorance, or simple understatement of security threats often result in authentication schemes that can be bypassed by simply skipping the log in page and directly calling an internal page that is supposed to be accessed only after authentication has been performed.

In addition, it is often possible to bypass authentication measures by tampering with requests and tricking the application into thinking that the user is already authenticated. This can be accomplished either by modifying the given URL parameter, by manipulating the form, or by counterfeiting sessions.

Problems related to the authentication schema can be found at different stages of the software development life cycle (SDLC), like the design, development, and deployment phases:

* In the design phase errors can include a wrong definition of application sections to be protected, the choice of not applying strong encryption protocols for securing the transmission of credentials, and many more.
* In the development phase errors can include the incorrect implementation of input validation functionality or not following the security best practices for the specific language.
* In the application deployment phase, there may be issues during the application setup (installation and configuration activities) due to a lack in required technical skills or due to the lack of good documentation.

#[References]#
https://www.owasp.org/index.php/Testing_for_Bypassing_Authentication_Schema_(OTG-AUTHN-004)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457733793</created_at></activity></activities></issue><issue><id>2885</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Test remember password functionality

#[Control]#
OTG-AUTHN-005 

#[Status]#
Unknown | Pass | Fail

#[Order]#
28

#[Summary]#
Browsers will sometimes ask a user if they wish to remember the password that they just entered. The browser will then store the password, and automatically enter it whenever the same authentication form is visited. This is a convenience for the user. Additionally some websites will offer custom "remember me" functionality to allow users to persist log ins on a specific client system.

Having the browser store passwords is not only a convenience for end-users, but also for an attacker. If an attacker can gain access to the victim's browser (e.g. through a Cross Site Scripting attack, or through a shared computer), then they can retrieve the stored passwords. It is not uncommon for browsers to store these passwords in an easily retrievable manner, but even if the browser were to store the passwords encrypted and only retrievable through the use of a master password, an attacker could retrieve the password by visiting the target web application's authentication form, entering the victim's username, and letting the browser to enter the password.

Additionally where custom "remember me" functions are put in place weaknesses in how the token is stored on the client PC (for example using base64 encoded credentials as the token) could expose the users passwords. Since early 2014 most major browsers will override any use of autocomplete="off" with regards to password forms and as a result previous checks for this are not required and recommendations should not commonly be given for disabling this feature. However this can still apply to things like secondary secrets which may be stored in the browser inadvertently.

#[References]#
https://www.owasp.org/index.php/Testing_for_Vulnerable_Remember_Password_(OTG-AUTHN-005)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457733814</created_at></activity></activities></issue><issue><id>2886</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Browser cache weakness

#[Control]#
OTG-AUTHN-006 

#[Status]#
Unknown | Pass | Fail

#[Order]#
29

#[Summary]#
Browsers can store information for purposes of caching and history. Caching is used to improve performance, so that previously displayed information doesn't need to be downloaded again. History mechanisms are used for user convenience, so the user can see exactly what they saw at the time when the resource was retrieved. If sensitive information is displayed to the user (such as their address, credit card details, Social Security Number, or username), then this information could be stored for purposes of caching or history, and therefore retrievable through examining the browser's cache or by simply pressing the browser's "Back" button. 

#[References]#
https://www.owasp.org/index.php/Testing_for_Browser_cache_weakness_(OTG-AUTHN-006)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457733838</created_at></activity></activities></issue><issue><id>2887</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Weak password policy

#[Control]#
OTG-AUTHN-007 

#[Status]#
Unknown | Pass | Fail

#[Order]#
30

#[Summary]#
The most prevalent and most easily administered authentication mechanism is a static password. The password represents the keys to the kingdom, but is often subverted by users in the name of usability. In each of the recent high profile hacks that have revealed user credentials, it is lamented that most common passwords are still: 123456, password and qwerty.

#[References]#
https://www.owasp.org/index.php/Testing_for_Weak_password_policy_(OTG-AUTHN-007)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457733854</created_at></activity></activities></issue><issue><id>2888</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Weak security question/answer

#[Control]#
OTG-AUTHN-008 

#[Status]#
Unknown | Pass | Fail

#[Order]#
31

#[Summary]#
Often called "secret" questions and answers, security questions and answers are often used to recover forgotten passwords (see Testing for weak password change or reset functionalities (OTG-AUTHN-009)), or as extra security on top of the password. 

They are typically generated upon account creation and require the user to select from some pre-generated questions and supply an appropriate answer. They may allow the user to generate their own question and answer pairs. Both methods are prone to insecurities.Ideally, security questions should generate answers that are only known by the user, and not guessable or discoverable by anybody else. This is harder than it sounds. 
Security questions and answers rely on the secrecy of the answer. Questions and answers should be chosen so that the answers are only known by the account holder. However, although a lot of answers may not be publicly known, most of the questions that websites implement promote answers that are pseudo-private. 

#[References]#
https://www.owasp.org/index.php/Testing_for_Weak_security_question/answer_(OTG-AUTHN-008)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457733870</created_at></activity></activities></issue><issue><id>2889</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for weak password change or reset functionalities

#[Control]#
OTG-AUTHN-009 

#[Status]#
Unknown | Pass | Fail

#[Order]#
32

#[Summary]#
The password change and reset function of an application is a self-service password change or reset mechanism for users. This self-service mechanism allows users to quickly change or reset their password without an administrator intervening. When passwords are changed they are typically changed within the application. When passwords are reset they are either rendered within the application or emailed to the user. This may indicate that the passwords are stored in plain text or in a decryptable format.

#[References]#
https://www.owasp.org/index.php/Testing_for_weak_password_change_or_reset_functionalities_(OTG-AUTHN-009)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457733891</created_at></activity></activities></issue><issue><id>2890</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Weaker authentication in alternative channel

#[Control]#
OTG-AUTHN-010 

#[Status]#
Unknown | Pass | Fail

#[Order]#
33

#[Summary]#
Even if the primary authentication mechanisms do not include any vulnerabilities, it may be that vulnerabilities exist in alternative legitimate authentication user channels for the same user accounts. Tests should be undertaken to identify alternative channels and, subject to test scoping, identify vulnerabilities.

The alternative user interaction channels could be utilized to circumvent the primary channel, or expose information that can then be used to assist an attack against the primary channel. Some of these channels may themselves be separate web applications using different host names or paths. For example:

* Standard website
* Mobile, or specific device, optimized website
* Accessibility optimized website
* Alternative country and language websites
* Parallel websites that utilize the same user accounts (e.g. another website offering different functionally of the same organization, a partner website with which user accounts are shared)
* Development, test, UAT and staging versions of the standard website


But they could also be other types of application or business processes:

* Mobile device app
* Desktop application
* Call center operators
* Interactive voice response or phone tree systems

Note that the focus of this test is on alternative channels; some authentication alternatives might appear as different content delivered via the same website and would almost certainly be in scope for testing. These are not discussed further here, and should have been identified during information gathering and primary authentication testing. For example:

* Progressive enrichment and graceful degradation that change functionality
* Site use without cookies
* Site use without JavaScript
* Site use without plugins such as for Flash and Java


Even if the scope of the test does not allow the alternative channels to be tested, their existence should be documented. These may undermine the degree of assurance in the authentication mechanisms and may be a precursor to additional testing.

#[References]#
https://www.owasp.org/index.php/Testing_for_Weaker_authentication_in_alternative_channel_(OTG-AUTHN-010)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457733904</created_at></activity></activities></issue><issue><id>2891</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing Directory traversal/file include

#[Control]#
OTG-AUTHZ-001 

#[Status]#
Unknown | Pass | Fail

#[Order]#
34

#[Summary]#
Many web applications use and manage files as part of their daily operation. Using input validation methods that have not been well designed or deployed, an aggressor could exploit the system in order to read or write files that are not intended to be accessible. In particular situations, it could be possible to execute arbitrary code or system commands. 

Traditionally, web servers and web applications implement authentication mechanisms to control access to files and resources. Web servers try to confine users' files inside a "root directory" or "web document root", which represents a physical directory on the file system. Users have to consider this directory as the base directory into the hierarchical structure of the web application.

The definition of the privileges is made using Access Control Lists (ACL) which identify which users or groups are supposed to be able to access, modify, or execute a specific file on the server. These mechanisms are designed to prevent malicious users from accessing sensitive files (for example, the common /etc/passwd file on a UNIX-like platform) or to avoid the execution of system commands.

Many web applications use server-side scripts to include different kinds of files. It is quite common to use this method to manage images, templates, load static texts, and so on. Unfortunately, these applications expose security vulnerabilities if input parameters (i.e., form parameters, cookie values) are not correctly validated.

In web servers and web applications, this kind of problem arises in path traversal/file include attacks. By exploiting this kind of vulnerability, an attacker is able to read directories or files which they normally couldn't read, access data outside the web document root, or include scripts and other kinds of files from external websites.

For the purpose of the OWASP Testing Guide, only the security threats related to web applications will be considered and not threats to web servers (e.g., the infamous "%5c escape code" into Microsoft IIS web server). Further reading suggestions will be provided in the references section for interested readers.

This kind of attack is also known as the dot-dot-slash attack (../), directory traversal, directory climbing, or backtracking.

During an assessment, to discover path traversal and file include flaws, testers need to perform two different stages:

* (a) Input Vectors Enumeration (a systematic evaluation of each input vector)
* (b) Testing Techniques (a methodical evaluation of each attack technique used by an attacker to exploit the vulnerability)

#[References]#
https://www.owasp.org/index.php/Testing_Directory_traversal/file_include_(OTG-AUTHZ-001)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457734938</created_at></activity></activities></issue><issue><id>2892</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for bypassing authorization schema

#[Control]#
OTG-AUTHZ-002 

#[Status]#
Unknown | Pass | Fail

#[Order]#
35

#[Summary]#
This kind of test focuses on verifying how the authorization schema has been implemented for each role or privilege to get access to reserved functions and resources.

For every specific role the tester holds during the assessment, for every function and request that the application executes during the post-authentication phase, it is necessary to verify:

* Is it possible to access that resource even if the user is not authenticated?
* Is it possible to access that resource after the log-out?
* Is it possible to access functions and resources that should be accessible to a user that holds a different role or privilege?

Try to access the application as an administrative user and track all the administrative functions.

* Is it possible to access administrative functions also if the tester is logged as a user with standard privileges?
* Is it possible to use these administrative functions as a user with a different role and for whom that action should be denied?

#[References]#
https://www.owasp.org/index.php/Testing_for_Bypassing_Authorization_Schema_(OTG-AUTHZ-002)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457734961</created_at></activity></activities></issue><issue><id>2893</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Privilege Escalation

#[Control]#
OTG-AUTHZ-003 

#[Status]#
Unknown | Pass | Fail

#[Order]#
36

#[Summary]#
This section describes the issue of escalating privileges from one stage to another. During this phase, the tester should verify that it is not possible for a user to modify his or her privileges or roles inside the application in ways that could allow privilege escalation attacks.

Privilege escalation occurs when a user gets access to more resources or functionality than they are normally allowed, and such elevation or changes should have been prevented by the application. This is usually caused by a flaw in the application. The result is that the application performs actions with more privileges than those intended by the developer or system administrator.

The degree of escalation depends on what privileges the attacker is authorized to possess, and what privileges can be obtained in a successful exploit. For example, a programming error that allows a user to gain extra privilege after successful authentication limits the degree of escalation, because the user is already authorized to hold some privilege. Likewise, a remote attacker gaining superuser privilege without any authentication presents a greater degree of escalation.

Usually, people refer to vertical escalation when it is possible to access resources granted to more privileged accounts (e.g., acquiring administrative privileges for the application), and to horizontal escalation when it is possible to access resources granted to a similarly configured account (e.g., in an online banking application, accessing information related to a different user).

#[References]#
https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457734983</created_at></activity></activities></issue><issue><id>2894</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Insecure Direct Object References

#[Control]#
OTG-AUTHZ-004 

#[Status]#
Unknown | Pass | Fail

#[Order]#
37

#[Summary]#
Insecure Direct Object References occur when an application provides direct access to objects based on user-supplied input. As a result of this vulnerability attackers can bypass authorization and access resources in the system directly, for example database records or files. 
Insecure Direct Object References allow attackers to bypass authorization and access resources directly by modifying the value of a parameter used to directly point to an object. Such resources can be database entries belonging to other users, files in the system, and more. This is caused by the fact that the application takes user supplied input and uses it to retrieve an object without performing sufficient authorization checks. 

#[References]#
https://www.owasp.org/index.php/Testing_for_Insecure_Direct_Object_References_(OTG-AUTHZ-004)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457734996</created_at></activity></activities></issue><issue><id>2895</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Bypassing Session Management Schema

#[Control]#
OTG-SESS-001 

#[Status]#
Unknown | Pass | Fail

#[Order]#
38

#[Summary]#
In order to avoid continuous authentication for each page of a website or service, web applications implement various mechanisms to store and validate credentials for a pre-determined timespan. These mechanisms are known as Session Management and while they are important in order to increase the ease of use and user-friendliness of the application, they can be exploited by a penetration tester to gain access to a user account, without the need to provide correct credentials.

In this test, the tester wants to check that cookies and other session tokens are created in a secure and unpredictable way. An attacker who is able to predict and forge a weak cookie can easily hijack the sessions of legitimate users.

Cookies are used to implement session management and are described in detail in RFC 2965. In a nutshell, when a user accesses an application which needs to keep track of the actions and identity of that user across multiple requests, a cookie (or cookies) is generated by the server and sent to the client. The client will then send the cookie back to the server in all following connections until the cookie expires or is destroyed. The data stored in the cookie can provide to the server a large spectrum of information about who the user is, what actions he has performed so far, what his preferences are, etc. therefore providing a state to a stateless protocol like HTTP.

A typical example is provided by an online shopping cart. Throughout the session of a user, the application must keep track of his identity, his profile, the products that he has chosen to buy, the quantity, the individual prices, the discounts, etc. Cookies are an efficient way to store and pass this information back and forth (other methods are URL parameters and hidden fields).

Due to the importance of the data that they store, cookies are therefore vital in the overall security of the application. Being able to tamper with cookies may result in hijacking the sessions of legitimate users, gaining higher privileges in an active session, and in general influencing the operations of the application in an unauthorized way.

In this test the tester has to check whether the cookies issued to clients can resist a wide range of attacks aimed to interfere with the sessions of legitimate users and with the application itself. The overall goal is to be able to forge a cookie that will be considered valid by the application and that will provide some kind of unauthorized access (session hijacking, privilege escalation, ...).

Usually the main steps of the attack pattern are the following:

* cookie collection: collection of a sufficient number of cookie samples;
* cookie reverse engineering: analysis of the cookie generation algorithm;
* cookie manipulation: forging of a valid cookie in order to perform the attack. This last step might require a large number of attempts, depending on how the cookie is created (cookie brute-force attack).


Another pattern of attack consists of overflowing a cookie. Strictly speaking, this attack has a different nature, since here testers are not trying to recreate a perfectly valid cookie. Instead, the goal is to overflow a memory area, thereby interfering with the correct behavior of the application and possibly injecting (and remotely executing) malicious code.

#[References]#
https://www.owasp.org/index.php/Testing_for_Session_Management_Schema_(OTG-SESS-001)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735019</created_at></activity></activities></issue><issue><id>2896</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Cookies attributes

#[Control]#
OTG-SESS-002 

#[Status]#
Unknown | Pass | Fail

#[Order]#
39

#[Summary]#
Cookies are often a key attack vector for malicious users (typically targeting other users) and the application should always take due diligence to protect cookies. This section looks at how an application can take the necessary precautions when assigning cookies, and how to test that these attributes have been correctly configured.

The importance of secure use of Cookies cannot be understated, especially within dynamic web applications, which need to maintain state across a stateless protocol such as HTTP. To understand the importance of cookies it is imperative to understand what they are primarily used for. These primary functions usually consist of being used as a session authorization and authentication token or as a temporary data container. Thus, if an attacker were able to acquire a session token (for example, by exploiting a cross site scripting vulnerability or by sniffing an unencrypted session), then they could use this cookie to hijack a valid session.

Additionally, cookies are set to maintain state across multiple requests. Since HTTP is stateless, the server cannot determine if a request it receives is part of a current session or the start of a new session without some type of identifier. This identifier is very commonly a cookie although other methods are also possible. There are many different types of applications that need to keep track of session state across multiple requests. The primary one that comes to mind would be an online store. As a user adds multiple items to a shopping cart, this data needs to be retained in subsequent requests to the application. Cookies are very commonly used for this task and are set by the application using the Set-Cookie directive in the application's HTTP response, and is usually in a name=value format (if cookies are enabled and if they are supported, as is the case for all modern web browsers). Once an application has told the browser to use a particular cookie, the browser will send this cookie in each subsequent request. A cookie can contain data such as items from an online shopping cart, the price of these items, the quantity of these items, personal information, user IDs, etc.

Due to the sensitive nature of information in cookies, they are typically encoded or encrypted in an attempt to protect the information they contain. Often, multiple cookies will be set (separated by a semicolon) upon subsequent requests. For example, in the case of an online store, a new cookie could be set as the user adds multiple items to the shopping cart. Additionally, there will typically be a cookie for authentication (session token as indicated above) once the user logs in, and multiple other cookies used to identify the items the user wishes to purchase and their auxiliary information (i.e., price and quantity) in the online store type of application.

Once the tester has an understanding of how cookies are set, when they are set, what they are used for, why they are used, and their importance, they should take a look at what attributes can be set for a cookie and how to test if they are secure. The following is a list of the attributes that can be set for each cookie and what they mean. The next section will focus on how to test for each attribute.

* secure - This attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed over unencrypted requests. If the application can be accessed over both HTTP and HTTPS, then there is the potential that the cookie can be sent in clear text.
* HttpOnly - This attribute is used to help prevent attacks such as cross-site scripting, since it does not allow the cookie to be accessed via a client side script such as JavaScript. Note that not all browsers support this functionality.
* domain - This attribute is used to compare against the domain of the server in which the URL is being requested. If the domain matches or if it is a sub-domain, then the path attribute will be checked next.


Note that only hosts within the specified domain can set a cookie for that domain. Also the domain attribute cannot be a top level domain (such as .gov or .com) to prevent servers from setting arbitrary cookies for another domain. If the domain attribute is not set, then the host name of the server that generated the cookie is used as the default value of the domain.

For example, if a cookie is set by an application at app.mydomain.com with no domain attribute set, then the cookie would be resubmitted for all subsequent requests for app.mydomain.com and its sub-domains (such as hacker.app.mydomain.com), but not to otherapp.mydomain.com. If a developer wanted to loosen this restriction, then he could set the domain attribute to mydomain.com. In this case the cookie would be sent to all requests for app.mydomain.com and its sub domains, such as hacker.app.mydomain.com, and even bank.mydomain.com. If there was a vulnerable server on a sub domain (for example, otherapp.mydomain.com) and the domain attribute has been set too loosely (for example, mydomain.com), then the vulnerable server could be used to harvest cookies (such as session tokens).

* path - In addition to the domain, the URL path that the cookie is valid for can be specified. If the domain and path match, then the cookie will be sent in the request. Just as with the domain attribute, if the path attribute is set too loosely, then it could leave the application vulnerable to attacks by other applications on the same server. For example, if the path attribute was set to the web server root "/", then the application cookies will be sent to every application within the same domain.
* expires - This attribute is used to set persistent cookies, since the cookie does not expire until the set date is exceeded. This persistent cookie will be used by this browser session and subsequent sessions until the cookie expires. Once the expiration date has exceeded, the browser will delete the cookie. Alternatively, if this attribute is not set, then the cookie is only valid in the current browser session and the cookie will be deleted when the session ends.

#[References]#
https://www.owasp.org/index.php/Testing_for_cookies_attributes_(OTG-SESS-002)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735035</created_at></activity></activities></issue><issue><id>2897</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Session Fixation

#[Control]#
OTG-SESS-003 

#[Status]#
Unknown | Pass | Fail

#[Order]#
40

#[Summary]#
When an application does not renew its session cookie(s) after a successful user authentication, it could be possible to find a session fixation vulnerability and force a user to utilize a cookie known by the attacker. In that case, an attacker could steal the user session (session hijacking).

Session fixation vulnerabilities occur when:
* A web application authenticates a user without first invalidating the existing session ID, thereby continuing to use the session ID already associated with the user.
* An attacker is able to force a known session ID on a user so that, once the user authenticates, the attacker has access to the authenticated session.

In the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to authenticate against the server using the same session identifier, giving the attacker access to the user's account through the active session.

Furthermore, the issue described above is problematic for sites that issue a session identifier over HTTP and then redirect the user to a HTTPS log in form. If the session identifier is not reissued upon authentication, the attacker can eavesdrop and steal the identifier and then use it to hijack the session.

#[References]#
https://www.owasp.org/index.php/Testing_for_Session_Fixation_(OTG-SESS-003)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735055</created_at></activity></activities></issue><issue><id>2898</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Exposed Session Variables

#[Control]#
OTG-SESS-004 

#[Status]#
Unknown | Pass | Fail

#[Order]#
41

#[Summary]#
The Session Tokens (Cookie, SessionID, Hidden Field), if exposed, will usually enable an attacker to impersonate a victim and access the application illegitimately. It is important that they are protected from eavesdropping at all times, particularly whilst in transit between the client browser and the application servers. 

The information here relates to how transport security applies to the transfer of sensitive Session ID data rather than data in general, and may be stricter than the caching and transport policies applied to the data served by the site.

Using a personal proxy, it is possible to ascertain the following about each request and response:

* Protocol used (e.g., HTTP vs. HTTPS)
* HTTP Headers
* Message Body (e.g., POST or page content)


Each time Session ID data is passed between the client and the server, the protocol, cache, and privacy directives and body should be examined. Transport security here refers to Session IDs passed in GET or POST requests, message bodies, or other means over valid HTTP requests.

#[References]#
https://www.owasp.org/index.php/Testing_for_Exposed_Session_Variables_(OTG-SESS-004)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735070</created_at></activity></activities></issue><issue><id>2899</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Cross Site Request Forgery

#[Control]#
OTG-SESS-005 

#[Status]#
Unknown | Pass | Fail

#[Order]#
42

#[Summary]#
CSRF is an attack that forces an end user to execute unwanted actions on a web application in which he/she is currently authenticated. With a little help of social engineering (like sending a link via email or chat), an attacker may force the users of a web application to execute actions of the attacker's choosing. A successful CSRF exploit can compromise end user data and operation, when it targets a normal user. If the targeted end user is the administrator account, a CSRF attack can compromise the entire web application.

CSRF relies on the following:

# Web browser behavior regarding the handling of session-related information such as cookies and http authentication information
# Knowledge by the attacker of valid web application URLs
# Application session management relying only on information which is known by the browser
# Existence of HTML tags whose presence cause immediate access to an http[s] resource; for example the image tag img
# Points 1, 2, and 3 are essential for the vulnerability to be present, while point 4 facilitates the actual exploitation, but is not strictly required.

Point 1) Browsers automatically send information which is used to identify a user session. Suppose site is a site hosting a web application, and the user victim has just authenticated himself to site. In response, site sends victim a cookie which identifies requests sent by victim as belonging to victim’s authenticated session. Basically, once the browser receives the cookie set by site, it will automatically send it along with any further requests directed to site.

Point 2) If the application does not make use of session-related information in URLs, then it means that the application URLs, their parameters, and legitimate values may be identified (either by code analysis or by accessing the application and taking note of forms and URLs embedded in the HTML/JavaScript).

Point 3) "Known by the browser” refers to information such as cookies, or http-based authentication information (such as Basic Authentication; and not form-based authentication), which are stored by the browser and subsequently present at each request directed towards an application area requesting that authentication. The vulnerabilities discussed next apply to applications which rely entirely on this kind of information to identify a user session.

#[References]#
https://www.owasp.org/index.php/Testing_for_CSRF_(OTG-SESS-005)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735092</created_at></activity></activities></issue><issue><id>2900</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for logout functionality

#[Control]#
OTG-SESS-006 

#[Status]#
Unknown | Pass | Fail

#[Order]#
43

#[Summary]#
Session termination is an important part of the session lifecycle. Reducing to a minimum the lifetime of the session tokens decreases the likelihood of a successful session hijacking attack. This can be seen as a control against preventing other attacks like Cross Site Scripting and Cross Site Request Forgery. Such attacks have been known to rely on a user having an authenticated session present. Not having a secure session termination only increases the attack surface for any of these attacks.

A secure session termination requires at least the following components:

* Availability of user interface controls that allow the user to manually log out.
* Session termination after a given amount of time without activity (session timeout).
* Proper invalidation of server-side session state.


There are multiple issues which can prevent the effective termination of a session. For the ideal secure web application, a user should be able to terminate at any time through the user interface. Every page should contain a log out button on a place where it is directly visible. Unclear or ambiguous log out functions could cause the user not trusting such functionality.

Another common mistake in session termination is that the client-side session token is set to a new value while the server-side state remains active and can be reused by setting the session cookie back to the previous value. Sometimes only a confirmation message is shown to the user without performing any further action. This should be avoided.

Some web application frameworks rely solely on the session cookie to identify the logged-on user. The user's ID is embedded in the (encrypted) cookie value. The application server does not do any tracking on the server-side of the session. When logging out, the session cookie is removed from the browser. However, since the application does not do any tracking, it does not know whether a session is logged out or not. So by reusing a session cookie it is possible to gain access to the authenticated session. A well-known example of this is the Forms Authentication functionality in ASP.NET.

Users of web browsers often don't mind that an application is still open and just close the browser or a tab. A web application should be aware of this behavior and terminate the session automatically on the server-side after a defined amount of time.

The usage of a single sign-on (SSO) system instead of an application-specific authentication scheme often causes the coexistence of multiple sessions which have to be terminated separately. For instance, the termination of the application-specific session does not terminate the session in the SSO system. Navigating back to the SSO portal offers the user the possibility to log back in to the application where the log out was performed just before. On the other side a log out function in a SSO system does not necessarily cause session termination in connected applications.

#[References]#
https://www.owasp.org/index.php/Testing_for_logout_functionality_(OTG-SESS-006)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735104</created_at></activity></activities></issue><issue><id>2901</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Test Session Timeout

#[Control]#
OTG-SESS-007 

#[Status]#
Unknown | Pass | Fail

#[Order]#
44

#[Summary]#
In this phase testers check that the application automatically logs out a user when that user has been idle for a certain amount of time, ensuring that it is not possible to “reuse” the same session and that no sensitive data remains stored in the browser cache.

All applications should implement an idle or inactivity timeout for sessions. This timeout defines the amount of time a session will remain active in case there is no activity by the user, closing and invalidating the session upon the defined idle period since the last HTTP request received by the web application for a given session ID. The most appropriate timeout should be a balance between security (shorter timeout) and usability (longer timeout) and heavily depends on the sensitivity level of the data handled by the application. For example, a 60 minute log out time for a public forum can be acceptable, but such a long time would be too much in a home banking application (where a maximum timeout of 15 minutes is recommended). In any case, any application that does not enforce a timeout-based log out should be considered not secure, unless such behavior is required by a specific functional requirement.

The idle timeout limits the chances that an attacker has to guess and use a valid session ID from another user, and under certain circumstances could protect public computers from session reuse. However, if the attacker is able to hijack a given session, the idle timeout does not limit the attacker’s actions, as he can generate activity on the session periodically to keep the session active for longer periods of time.

Session timeout management and expiration must be enforced server-side. If some data under the control of the client is used to enforce the session timeout, for example using cookie values or other client parameters to track time references (e.g. number of minutes since log in time), an attacker could manipulate these to extend the session duration. So the application has to track the inactivity time on the server side and, after the timeout is expired, automatically invalidate the current user's session and delete every data stored on the client.

Both actions must be implemented carefully, in order to avoid introducing weaknesses that could be exploited by an attacker to gain unauthorized access if the user forgot to log out from the application. More specifically, as for the log out function, it is important to ensure that all session tokens (e.g. cookies) are properly destroyed or made unusable, and that proper controls are enforced at the server side to prevent the reuse of session tokens. If such actions are not properly carried out, an attacker could replay these session tokens in order to “resurrect” the session of a legitimate user and impersonate him/her (this attack is usually known as 'cookie replay'). Of course, a mitigating factor is that the attacker needs to be able to access those tokens (which are stored on the victim's PC), but, in a variety of cases, this may not be impossible or particularly difficult.

The most common scenario for this kind of attack is a public computer that is used to access some private information (e.g., web mail, online bank account). If the user moves away from the computer without explicitly logging out and the session timeout is not implemented on the application, then an attacker could access to the same account by simply pressing the “back” button of the browser.

#[References]#
https://www.owasp.org/index.php/Test_Session_Timeout_(OTG-SESS-007)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735122</created_at></activity></activities></issue><issue><id>2902</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Session puzzling

#[Control]#
OTG-SESS-008 

#[Status]#
Unknown | Pass | Fail

#[Order]#
45

#[Summary]#
Session Variable Overloading (also known as Session Puzzling) is an application level vulnerability which can enable an attacker to perform a variety of malicious actions, including but not limited to:

* Bypass efficient authentication enforcement mechanisms, and impersonate legitimate users.
* Elevate the privileges of a malicious user account, in an environment that would otherwise be considered foolproof.
* Skip over qualifying phases in multi-phase processes, even if the process includes all the commonly recommended code level restrictions.
* Manipulate server-side values in indirect methods that cannot be predicted or detected.
* Execute traditional attacks in locations that were previously unreachable, or even considered secure.


This vulnerability occurs when an application uses the same session variable for more than one purpose. An attacker can potentially access pages in an order unanticipated by the developers so that the session variable is set in one context and then used in another.

For example, an attacker could use session variable overloading to bypass authentication enforcement mechanisms of applications that enforce authentication by validating the existence of session variables that contain identity–related values, which are usually stored in the session after a successful authentication process. This means an attacker first accesses a location in the application that sets session context and then accesses privileged locations that examine this context.

For example - an authentication bypass attack vector could be executed by accessing a publicly accessible entry point (e.g. a password recovery page) that populates the session with an identical session variable, based on fixed values or on user originating input.

#[References]#
https://www.owasp.org/index.php/Testing_for_Session_puzzling_(OTG-SESS-008)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735134</created_at></activity></activities></issue><issue><id>2903</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Reflected Cross Site Scripting

#[Control]#
OTG-INPVAL-001 

#[Status]#
Unknown | Pass | Fail

#[Order]#
46

#[Summary]#
Reflected Cross-site Scripting (XSS) occur when an attacker injects browser executable code within a single HTTP response. The injected attack is not stored within the application itself; it is non-persistent and only impacts users who open a maliciously crafted link or third-party web page. The attack string is included as part of the crafted URI or HTTP parameters, improperly processed by the application, and returned to the victim.

Reflected XSS are the most frequent type of XSS attacks found in the wild. Reflected XSS attacks are also known as non-persistent XSS attacks and, since the attack payload is delivered and executed via a single request and response, they are also referred to as first-order or type 1 XSS.

When a web application is vulnerable to this type of attack, it will pass unvalidated input sent through requests back to the client. The common modus operandi of the attack includes a design step, in which the attacker creates and tests an offending URI, a social engineering step, in which she convinces her victims to load this URI on their browsers, and the eventual execution of the offending code using the victim's browser.

Commonly the attacker's code is written in the Javascript language, but other scripting languages are also used, e.g., ActionScript and VBScript. Attackers typically leverage these vulnerabilities to install key loggers, steal victim cookies, perform clipboard theft, and change the content of the page (e.g., download links).

One of the primary difficulties in preventing XSS vulnerabilities is proper character encoding. In some cases, the web server or the web application could not be filtering some encodings of characters, so, for example, the web application might filter out "<script>", but might not filter %3cscript%3e which simply includes another encoding of tags.

#[References]#
https://www.owasp.org/index.php/Testing_for_Reflected_Cross_site_scripting_(OTG-INPVAL-001)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735574</created_at></activity></activities></issue><issue><id>2904</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Stored Cross Site Scripting

#[Control]#
OTG-INPVAL-002 

#[Status]#
Unknown | Pass | Fail

#[Order]#
47

#[Summary]#
Stored Cross-site Scripting (XSS) is the most dangerous type of Cross Site Scripting. Web applications that allow users to store data are potentially exposed to this type of attack. This chapter illustrates examples of stored cross site scripting injection and related exploitation scenarios.

Stored XSS occurs when a web application gathers input from a user which might be malicious, and then stores that input in a data store for later use. The input that is stored is not correctly filtered. As a consequence, the malicious data will appear to be part of the web site and run within the user’s browser under the privileges of the web application. Since this vulnerability typically involves at least two requests to the application, this may also called second-order XSS.

This vulnerability can be used to conduct a number of browser-based attacks including:

* Hijacking another user's browser
* Capturing sensitive information viewed by application users
* Pseudo defacement of the application
* Port scanning of internal hosts ("internal" in relation to the users of the web application)
* Directed delivery of browser-based exploits
* Other malicious activities


Stored XSS does not need a malicious link to be exploited. A successful exploitation occurs when a user visits a page with a stored XSS. The following phases relate to a typical stored XSS attack scenario:

* Attacker stores malicious code into the vulnerable page
* User authenticates in the application
* User visits vulnerable page
* Malicious code is executed by the user's browser


This type of attack can also be exploited with browser exploitation frameworks such as BeEF, XSS Proxy and Backframe. These frameworks allow for complex JavaScript exploit development.

Stored XSS is particularly dangerous in application areas where users with high privileges have access. When the administrator visits the vulnerable page, the attack is automatically executed by their browser. This might expose sensitive information such as session authorization tokens.

#[References]#
https://www.owasp.org/index.php/Testing_for_Stored_Cross_site_scripting_(OTG-INPVAL-002)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735585</created_at></activity></activities></issue><issue><id>2905</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for HTTP Verb Tampering

#[Control]#
OTG-INPVAL-003 

#[Status]#
Unknown | Pass | Fail

#[Order]#
48

#[Summary]#
The HTTP specification includes request methods other than the standard GET and POST requests. A standards compliant web server may respond to these alternative methods in ways not anticipated by developers. Although the common description is 'verb' tampering, the HTTP 1.1 standard refers to these request types as different HTTP 'methods.' 

The full HTTP 1.1 specification [1] defines the following valid HTTP request methods, or verbs:


bc.. OPTIONS
GET
HEAD
POST
PUT
DELETE
TRACE
CONNECT

p. If enabled, the Web Distributed Authoring and Version (WebDAV) extensions [2] [3] permit several more HTTP methods:

bc.. PROPFIND
PROPPATCH
MKCOL
COPY
MOVE
LOCK
UNLOCK

p. However, most web applications only need to respond to GET and POST requests, providing user data in the URL query string or appended to the request respectively. The standard <a href=""></a> style links trigger a GET request; form data submitted via <form method='POST'></form> trigger POST requests. Forms defined without a method also send data via GET by default.

Oddly, the other valid HTTP methods are not supported by the HTML standard [4]. Any HTTP method other than GET or POST needs to be called outside the HTML document. However, JavaScript and AJAX calls may send methods other than GET and POST.

As long as the web application being tested does not specifically call for any non-standard HTTP methods, testing for HTTP verb tampering is quite simple. If the server accepts a request other than GET or POST, the test fails. The solutions is to disable all non GET or POST functionality within the web application server, or in a web application firewall.

If methods such as HEAD or OPTIONS are required for your application, this increases the burden of testing substantially. Each action within the system will need to be verified that these alternate methods do not trigger actions without proper authentication or reveal information about the contents or workings web application. If possible, limit alternate HTTP method usage to a single page that contains no user actions, such the default landing page (example: index.html).

#[References]#
https://www.owasp.org/index.php/Testing_for_HTTP_Verb_Tampering_(OTG-INPVAL-003)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735597</created_at></activity></activities></issue><issue><id>2906</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for HTTP Parameter pollution

#[Control]#
OTG-INPVAL-004 

#[Status]#
Unknown | Pass | Fail

#[Order]#
49

#[Summary]#
Supplying multiple HTTP parameters with the same name may cause an application to interpret values in unanticipated ways. By exploiting these effects, an attacker may be able to bypass input validation, trigger application errors or modify internal variables values. As HTTP Parameter Pollution (in short HPP) affects a building block of all web technologies, server and client side attacks exist. 

Current HTTP standards do not include guidance on how to interpret multiple input parameters with the same name. For instance, RFC 3986 simply defines the term Query String as a series of field-value pairs and RFC 2396 defines classes of reversed and unreserved query string characters. Without a standard in place, web application components handle this edge case in a variety of ways (see the table below for details).

By itself, this is not necessarily an indication of vulnerability. However, if the developer is not aware of the problem, the presence of duplicated parameters may produce an anomalous behavior in the application that can be potentially exploited by an attacker. As often in security, unexpected behaviors are a usual source of weaknesses that could lead to HTTP Parameter Pollution attacks in this case. To better introduce this class of vulnerabilities and the outcome of HPP attacks, it is interesting to analyze some real-life examples that have been discovered in the past.

#[References]#
https://www.owasp.org/index.php/Testing_for_HTTP_Parameter_pollution_(OTG-INPVAL-004)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735610</created_at></activity></activities></issue><issue><id>2907</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for SQL Injection

#[Control]#
OTG-INPVAL-005 

#[Status]#
Unknown | Pass | Fail

#[Order]#
50

#[Summary]#
An SQL injection attack consists of insertion or "injection" of either a partial or complete SQL query via the data input or transmitted from the client (browser) to the web application. A successful SQL injection attack can read sensitive data from the database, modify database data (insert/update/delete), execute administration operations on the database (such as shutdown the DBMS), recover the content of a given file existing on the DBMS file system or write files into the file system, and, in some cases, issue commands to the operating system. SQL injection attacks are a type of injection attack, in which SQL commands are injected into data-plane input in order to affect the execution of predefined SQL commands.

In general the way web applications construct SQL statements involving SQL syntax written by the programmers is mixed with user-supplied data. Example:

bc. select title, text from news where id=$id

In the example above the variable $id contains user-supplied data, while the remainder is the SQL static part supplied by the programmer; making the SQL statement dynamic.

Because the way it was constructed, the user can supply crafted input trying to make the original SQL statement execute further actions of the user's choice. The example below illustrates the user-supplied data “10 or 1=1”, changing the logic of the SQL statement, modifying the WHERE clause adding a condition “or 1=1”.

bc. select title, text from news where id=10 or 1=1

SQL Injection attacks can be divided into the following three classes:

* Inband: data is extracted using the same channel that is used to inject the SQL code. This is the most straightforward kind of attack, in which the retrieved data is presented directly in the application web page.
* Out-of-band: data is retrieved using a different channel (e.g., an email with the results of the query is generated and sent to the tester).
* Inferential or Blind: there is no actual transfer of data, but the tester is able to reconstruct the information by sending particular requests and observing the resulting behavior of the DB Server.


A successful SQL Injection attack requires the attacker to craft a syntactically correct SQL Query. If the application returns an error message generated by an incorrect query, then it may be easier for an attacker to reconstruct the logic of the original query and, therefore, understand how to perform the injection correctly. However, if the application hides the error details, then the tester must be able to reverse engineer the logic of the original query.

About the techniques to exploit SQL injection flaws there are five commons techniques. Also those techniques sometimes can be used in a combined way (e.g. union operator and out-of-band):

* Union Operator: can be used when the SQL injection flaw happens in a SELECT statement, making it possible to combine two queries into a single result or result set.
* Boolean: use Boolean condition(s) to verify whether certain conditions are true or false.
* Error based: this technique forces the database to generate an error, giving the attacker or tester information upon which to refine their injection.
* Out-of-band: technique used to retrieve data using a different channel (e.g., make a HTTP connection to send the results to a web server).
* Time delay: use database commands (e.g. sleep) to delay answers in conditional queries. It is useful when attacker doesn’t have some kind of answer (result, output, or error) from the application.


#[References]#
https://www.owasp.org/index.php/Testing_for_SQL_Injection_(OTG-INPVAL-005)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735624</created_at></activity></activities></issue><issue><id>2953</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Oracle Testing

#[Control]#
OTG-INPVAL-005

#[Status]#
Unknown | Pass | Fail

#[Order]#
51

#[Summary]#
Web based PL/SQL applications are enabled by the PL/SQL Gateway, which is is the component that translates web requests into database queries. Oracle has developed a number of software implementations, ranging from the early web listener product to the Apache mod_plsql module to the XML Database (XDB) web server. All have their own quirks and issues, each of which will be thoroughly investigated in this chapter. Products that use the PL/SQL Gateway include, but are not limited to, the Oracle HTTP Server, eBusiness Suite, Portal, HTMLDB, WebDB and Oracle Application Server. 

#[References]#
https://www.owasp.org/index.php/Testing_for_Oracle

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458713898</created_at></activity></activities></issue><issue><id>2954</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
MySQL Testing

#[Control]#
OTG-INPVAL-005

#[Status]#
Unknown | Pass | Fail

#[Order]#
52

#[Summary]#
SQL Injection vulnerabilities occur whenever input is used in the construction of a SQL query without being adequately constrained or sanitized. The use of dynamic SQL (the construction of SQL queries by concatenation of strings) opens the door to these vulnerabilities. SQL injection allows an attacker to access the SQL servers. It allows for the execution of SQL code under the privileges of the user used to connect to the database.

#[References]#
https://www.owasp.org/index.php/Testing_for_MySQL

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458713982</created_at></activity></activities></issue><issue><id>2955</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
SQL Server Testing

#[Control]#
OTG-INPVAL-005

#[Status]#
Unknown | Pass | Fail

#[Order]#
53

#[Summary]#
SQL injection vulnerabilities occur whenever input is used in the construction of an SQL query without being adequately constrained or sanitized. The use of dynamic SQL (the construction of SQL queries by concatenation of strings) opens the door to these vulnerabilities. SQL injection allows an attacker to access the SQL servers and execute SQL code under the privileges of the user used to connect to the database.

As explained in SQL injection, a SQL-injection exploit requires two things: an entry point and an exploit to enter. Any user-controlled parameter that gets processed by the application might be hiding a vulnerability. This includes:

* Application parameters in query strings (e.g., GET requests)
* Application parameters included as part of the body of a POST request
* Browser-related information (e.g., user-agent, referrer)
* Host-related information (e.g., host name, IP)
* Session-related information (e.g., user ID, cookies)


Microsoft SQL server has a few unique characteristics, so some exploits need to be specially customized for this application.

#[References]#
https://www.owasp.org/index.php/Testing_for_SQL_Server

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458714127</created_at></activity></activities></issue><issue><id>2956</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing PostgreSQL (from OWASP BSP)

#[Control]#
OTG-INPVAL-005

#[Status]#
Unknown | Pass | Fail

#[Order]#
54

#[Summary]#
In this section, some SQL Injection techniques for PostgreSQL will be discussed. These techniques have the following characteristics:

* PHP Connector allows multiple statements to be executed by using ; as a statement separator
* SQL Statements can be truncated by appending the comment char: --.
* LIMIT and OFFSET can be used in a SELECT statement to retrieve a portion of the result set generated by the query


From now on it is assumed that http://www.example.com/news.php?id=1 is vulnerable to SQL Injection attacks.

#[References]#
https://www.owasp.org/index.php/OWASP_Backend_Security_Project_Testing_PostgreSQL

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458714390</created_at></activity></activities></issue><issue><id>2957</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
MS Access Testing

#[Control]#
OTG-INPVAL-005

#[Status]#
Unknown | Pass | Fail

#[Order]#
55

#[Summary]#
As explained in the generic SQL injection section, SQL injection vulnerabilities occur whenever user-supplied input is used during the construction of a SQL query without being adequately constrained or sanitized. This class of vulnerabilities allows an attacker to execute SQL code under the privileges of the user that is used to connect to the database. In this section, relevant SQL injection techniques that utilize specific features of Microsoft Access will be discussed.

#[References]#
https://www.owasp.org/index.php/Testing_for_MS_Access

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458714472</created_at></activity></activities></issue><issue><id>2958</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for NoSQL injection

#[Control]#
OTG-INPVAL-005

#[Status]#
Unknown | Pass | Fail

#[Order]#
56

#[Summary]#
NoSQL databases provide looser consistency restrictions than traditional SQL databases. By requiring fewer relational constraints and consistency checks, NoSQL databases often offer performance and scaling benefits. Yet these databases are still potentially vulnerable to injection attacks, even if they aren't using the traditional SQL syntax. Because these NoSQL injection attacks may execute within a procedural[1] language , rather than in the declarative[2] SQL language, the potential impacts are greater than traditional SQL injection. 

NoSQL database calls are written in the application's programming language, a custom API call, or formatted according to a common convention (such as XML, JSON, LINQ, etc). Malicious input targeting those specifications may not trigger the primarily application sanitization checks. For example, filtering out common HTML special characters such as < > & ; will not prevent attacks against a JSON API, where special characters include / { } : .

There are now over 150 NoSQL databases available[3] for use within an application, providing APIs in a variety of languages and relationship models. Each offers different features and restrictions. Because there is not a common language between them, example injection code will not apply across all NoSQL databases. For this reason, anyone testing for NoSQL injection attacks will need to familiarize themselves with the syntax, data model, and underlying programming language in order to craft specific tests.

NoSQL injection attacks may execute in different areas of an application than traditional SQL injection. Where SQL injection would execute within the database engine, NoSQL variants may execute during within the application layer or the database layer, depending on the NoSQL API used and data model. Typically NoSQL injection attacks will execute where the attack string is parsed, evaluated, or concatenated into a NoSQL API call.

Additional timing attacks may be relevant to the lack of concurrency checks within a NoSQL database. These are not covered under injection testing. At the time of writing MongoDB is the most widely used NoSQL database, and so all examples will feature MongoDB APIs. 

#[References]#
https://www.owasp.org/index.php/Testing_for_NoSQL_injection

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458714482</created_at></activity></activities></issue><issue><id>2908</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for LDAP Injection

#[Control]#
OTG-INPVAL-006 

#[Status]#
Unknown | Pass | Fail

#[Order]#
57

#[Summary]#
The Lightweight Directory Access Protocol (LDAP) is used to store information about users, hosts, and many other objects. LDAP injection is a server side attack, which could allow sensitive information about users and hosts represented in an LDAP structure to be disclosed, modified, or inserted. This is done by manipulating input parameters afterwards passed to internal search, add, and modify functions.

A web application could use LDAP in order to let users authenticate or search other users' information inside a corporate structure. The goal of LDAP injection attacks is to inject LDAP search filters metacharacters in a query which will be executed by the application.

#[References]#
https://www.owasp.org/index.php/Testing_for_LDAP_Injection_(OTG-INPVAL-006)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735638</created_at></activity></activities></issue><issue><id>2909</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for ORM Injection

#[Control]#
OTG-INPVAL-007 

#[Status]#
Unknown | Pass | Fail

#[Order]#
58

#[Summary]#
ORM Injection is an attack using SQL Injection against an ORM generated data access object model. From the point of view of a tester, this attack is virtually identical to a SQL Injection attack. However, the injection vulnerability exists in code generated by the ORM tool.

An ORM is an Object Relational Mapping tool. It is used to expedite object oriented development within the data access layer of software applications, including web applications. The benefits of using an ORM tool include quick generation of an object layer to communicate to a relational database, standardized code templates for these objects, and usually a set of safe functions to protect against SQL Injection attacks. ORM generated objects can use SQL or in some cases, a variant of SQL, to perform CRUD (Create, Read, Update, Delete) operations on a database. It is possible, however, for a web application using ORM generated objects to be vulnerable to SQL Injection attacks if methods can accept unsanitized input parameters.

ORM tools include Hibernate for Java, NHibernate for .NET, ActiveRecord for Ruby on Rails, EZPDO for PHP and many others. For a reasonably comprehensive list of ORM tools, see http://en.wikipedia.org/wiki/List_of_object-relational_mapping_software

#[References]#
https://www.owasp.org/index.php/Testing_for_ORM_Injection_(OTG-INPVAL-007)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735652</created_at></activity></activities></issue><issue><id>2910</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for XML Injection

#[Control]#
OTG-INPVAL-008 

#[Status]#
Unknown | Pass | Fail

#[Order]#
59

#[Summary]#
XML Injection testing is when a tester tries to inject an XML doc to the application. If the XML parser fails to contextually validate data, then the test will yield a positive result.

This section describes practical examples of XML Injection. First, an XML style communication will be defined and its working principles explained. Then, the discovery method in which we try to insert XML metacharacters. Once the first step is accomplished, the tester will have some information about the XML structure, so it will be possible to try to inject XML data and tags (Tag Injection).

#[References]#
https://www.owasp.org/index.php/Testing_for_XML_Injection_(OTG-INPVAL-008)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735664</created_at></activity></activities></issue><issue><id>2911</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for SSI Injection

#[Control]#
OTG-INPVAL-009 

#[Status]#
Unknown | Pass | Fail

#[Order]#
60

#[Summary]#
Web servers usually give developers the ability to add small pieces of dynamic code inside static HTML pages, without having to deal with full-fledged server-side or client-side languages. This feature is incarnated by the Server-Side Includes (SSI). In SSI injection testing, we test if it is possible to inject into the application data that will be interpreted by SSI mechanisms. A successful exploitation of this vulnerability allows an attacker to inject code into HTML pages or even perform remote code execution.

Server-Side Includes are directives that the web server parses before serving the page to the user. They represent an alternative to writing CGI programs or embedding code using server-side scripting languages, when there's only need to perform very simple tasks. Common SSI implementations provide commands to include external files, to set and print web server CGI environment variables, and to execute external CGI scripts or system commands.

Putting an SSI directive into a static HTML document is as easy as writing a piece of code like the following:

bc. <!--#echo var="DATE_LOCAL" -->
to print out the current time.

bc. <!--#include virtual="/cgi-bin/counter.pl" -->
to include the output of a CGI script.

bc. <!--#include virtual="/footer.html" -->
to include the content of a file or list files in a directory.

bc. <!--#exec cmd="ls" -->
to include the output of a system command.

Then, if the web server's SSI support is enabled, the server will parse these directives. In the default configuration, usually, most web servers don't allow the use of the exec directive to execute system commands.

As in every bad input validation situation, problems arise when the user of a web application is allowed to provide data that makes the application or the web server behave in an unforeseen manner. With regard to SSI injection, the attacker could provide input that, if inserted by the application (or maybe directly by the server) into a dynamically generated page, would be parsed as one or more SSI directives.

This is a vulnerability very similar to a classical scripting language injection vulnerability. One mitigation is that the web server needs to be configured to allow SSI. On the other hand, SSI injection vulnerabilities are often simpler to exploit, since SSI directives are easy to understand and, at the same time, quite powerful, e.g., they can output the content of files and execute system commands.

#[References]#
https://www.owasp.org/index.php/Testing_for_SSI_Injection_(OTG-INPVAL-009)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735677</created_at></activity></activities></issue><issue><id>2912</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for XPath Injection

#[Control]#
OTG-INPVAL-010 

#[Status]#
Unknown | Pass | Fail

#[Order]#
61

#[Summary]#
XPath is a language that has been designed and developed primarily to address parts of an XML document. In XPath injection testing, we test if it is possible to inject XPath syntax into a request interpreted by the application, allowing an attacker to execute user-controlled XPath queries. When successfully exploited, this vulnerability may allow an attacker to bypass authentication mechanisms or access information without proper authorization.

Web applications heavily use databases to store and access the data they need for their operations. Historically, relational databases have been by far the most common technology for data storage, but, in the last years, we are witnessing an increasing popularity for databases that organize data using the XML language. Just like relational databases are accessed via SQL language, XML databases use XPath as their standard query language.

Since, from a conceptual point of view, XPath is very similar to SQL in its purpose and applications, an interesting result is that XPath injection attacks follow the same logic as SQL Injection attacks. In some aspects, XPath is even more powerful than standard SQL, as its whole power is already present in its specifications, whereas a large number of the techniques that can be used in a SQL Injection attack depend on the characteristics of the SQL dialect used by the target database. This means that XPath injection attacks can be much more adaptable and ubiquitous. Another advantage of an XPath injection attack is that, unlike SQL, no ACLs are enforced, as our query can access every part of the XML document.

#[References]#
https://www.owasp.org/index.php/Testing_for_XPath_Injection_(OTG-INPVAL-010)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735694</created_at></activity></activities></issue><issue><id>2913</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
IMAP/SMTP Injection

#[Control]#
OTG-INPVAL-011 

#[Status]#
Unknown | Pass | Fail

#[Order]#
62

#[Summary]#
This threat affects all applications that communicate with mail servers (IMAP/SMTP), generally webmail applications. The aim of this test is to verify the capacity to inject arbitrary IMAP/SMTP commands into the mail servers, due to input data not being properly sanitized.

The IMAP/SMTP Injection technique is more effective if the mail server is not directly accessible from Internet. Where full communication with the backend mail server is possible, it is recommended to conduct direct testing.

An IMAP/SMTP Injection makes it possible to access a mail server which otherwise would not be directly accessible from the Internet. In some cases, these internal systems do not have the same level of infrastructure security and hardening that is applied to the front-end web servers. Therefore, mail server results may be more vulnerable to attacks by end users.

This technique allows a wide variety of actions and attacks. The possibilities depend on the type and scope of injection and the mail server technology being tested.

Some examples of attacks using the IMAP/SMTP Injection technique are:

* Exploitation of vulnerabilities in the IMAP/SMTP protocol
* Application restrictions evasion
* Anti-automation process evasion
* Information leaks
* Relay/SPAM


#[References]#
https://www.owasp.org/index.php/Testing_for_IMAP/SMTP_Injection_(OTG-INPVAL-011)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735709</created_at></activity></activities></issue><issue><id>2914</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Code Injection

#[Control]#
OTG-INPVAL-012 

#[Status]#
Unknown | Pass | Fail

#[Order]#
63

#[Summary]#
This section describes how a tester can check if it is possible to enter code as input on a web page and have it executed by the web server.

In Code Injection testing, a tester submits input that is processed by the web server as dynamic code or as an included file. These tests can target various server-side scripting engines, e.g.., ASP or PHP. Proper input validation and secure coding practices need to be employed to protect against these attacks.

#[References]#
https://www.owasp.org/index.php/Testing_for_Code_Injection_(OTG-INPVAL-012)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457735718</created_at></activity></activities></issue><issue><id>2915</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Local File Inclusion

#[Control]#
OTG-INPVAL-012

#[Status]#
Unknown | Pass | Fail

#[Order]#
64

#[Summary]#
The File Inclusion vulnerability allows an attacker to include a file, usually exploiting a "dynamic file inclusion" mechanisms implemented in the target application. The vulnerability occurs due to the use of user-supplied input without proper validation.

This can lead to something as outputting the contents of the file, but depending on the severity, it can also lead to:

* Code execution on the web server
* Code execution on the client-side such as JavaScript which can lead to other attacks such as cross site scripting (XSS)
* Denial of Service (DoS)
* Sensitive Information Disclosure


Local File Inclusion (also known as LFI) is the process of including files, that are already locally present on the server, through the exploiting of vulnerable inclusion procedures implemented in the application. This vulnerability occurs, for example, when a page receives, as input, the path to the file that has to be included and this input is not properly sanitized, allowing directory traversal characters (such as dot-dot-slash) to be injected. Although most examples point to vulnerable PHP scripts, we should keep in mind that it is also common in other technologies such as JSP, ASP and others.

#[References]#
https://www.owasp.org/index.php/Testing_for_Local_File_Inclusion

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736159</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458715231</created_at></activity></activities></issue><issue><id>2916</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Remote File Inclusion

#[Control]#
OTG-INPVAL-012

#[Status]#
Unknown | Pass | Fail

#[Order]#
65

#[Summary]#
The File Inclusion vulnerability allows an attacker to include a file, usually exploiting a "dynamic file inclusion" mechanisms implemented in the target application. The vulnerability occurs due to the use of user-supplied input without proper validation.

This can lead to something as outputting the contents of the file, but depending on the severity, it can also lead to:

* Code execution on the web server
* Code execution on the client-side such as JavaScript which can lead to other attacks such as cross site scripting (XSS)
* Denial of Service (DoS)
* Sensitive Information Disclosure


Remote File Inclusion (also known as RFI) is the process of including remote files through the exploiting of vulnerable inclusion procedures implemented in the application. This vulnerability occurs, for example, when a page receives, as input, the path to the file that has to be included and this input is not properly sanitized, allowing external URL to be injected. Although most examples point to vulnerable PHP scripts, we should keep in mind that it is also common in other technologies such as JSP, ASP and others.

#[References]#
https://www.owasp.org/index.php/Testing_for_Remote_File_Inclusion

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736176</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458715228</created_at></activity></activities></issue><issue><id>2917</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Command Injection

#[Control]#
OTG-INPVAL-013 

#[Status]#
Unknown | Pass | Fail

#[Order]#
66

#[Summary]#
This article describes how to test an application for OS command injection. The tester will try to inject an OS command through an HTTP request to the application.

OS command injection is a technique used via a web interface in order to execute OS commands on a web server. The user supplies operating system commands through a web interface in order to execute OS commands. Any web interface that is not properly sanitized is subject to this exploit. With the ability to execute OS commands, the user can upload malicious programs or even obtain passwords. OS command injection is preventable when security is emphasized during the design and development of applications.

#[References]#
https://www.owasp.org/index.php/Testing_for_Command_Injection_(OTG-INPVAL-013)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736195</created_at></activity></activities></issue><issue><id>2918</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Buffer overflow

#[Control]#
OTG-INPVAL-014 

#[Status]#
Unknown | Pass | Fail

#[Order]#
67

#[Summary]#
A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold or when a program attempts to put data in a memory area past a buffer. In this case, a buffer is a sequential section of memory allocated to contain anything from a character string to an array of integers. Writing outside the bounds of a block of allocated memory can corrupt data, crash the program, or cause the execution of malicious code.

#[References]#
https://www.owasp.org/index.php/Testing_for_Buffer_Overflow_(OTG-INPVAL-014)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736208</created_at></activity></activities></issue><issue><id>2919</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Heap overflow

#[Control]#
OTG-INPVAL-014

#[Status]#
Unknown | Pass | Fail

#[Order]#
68

#[Summary]#
In this test the penetration tester checks whether a they can make a Heap overflow that exploits a memory segment.

Heap is a memory segment that is used for storing dynamically allocated data and global variables. Each chunk of memory in heap consists of boundary tags that contain memory management information.

When a heap-based buffer is overflowed the control information in these tags is overwritten. When the heap management routine frees the buffer, a memory address overwrite takes place leading to an access violation. When the overflow is executed in a controlled fashion, the vulnerability would allow an adversary to overwrite a desired memory location with a user-controlled value. In practice, an attacker would be able to overwrite function pointers and various addresses stored in structures like GOT, .dtors or TEB with the address of a malicious payload.

There are numerous variants of the heap overflow (heap corruption) vulnerability that can allow anything from overwriting function pointers to exploiting memory management structures for arbitrary code execution. Locating heap overflows requires closer examination in comparison to stack overflows, since there are certain conditions that need to exist in the code for these vulnerabilities to be exploitable.

#[References]#
https://www.owasp.org/index.php/Testing_for_Heap_Overflow

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736221</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458715813</created_at></activity></activities></issue><issue><id>2920</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Stack overflow

#[Control]#
OTG-INPVAL-014

#[Status]#
Unknown | Pass | Fail

#[Order]#
69

#[Summary]#
Stack overflows occur when variable size data is copied into fixed length buffers located on the program stack without any bounds checking. Vulnerabilities of this class are generally considered to be of high severity since their exploitation would mostly permit arbitrary code execution or Denial of Service. Rarely found in interpreted platforms, code written in C and similar languages is often ridden with instances of this vulnerability. In fact almost every platform is vulnerable to stack overflows with the following notable exceptions:

* J2EE – as long as native methods or system calls are not invoked
* .NET – as long as /unsafe or unmanaged code is not invoked (such as the use of P/Invoke or COM Interop)
* PHP – as long as external programs and vulnerable PHP extensions written in C or C++ are not called can suffer from stack overflow issues.


Stack overflow vulnerabilities often allow an attacker to directly take control of the instruction pointer and, therefore, alter the execution of the program and execute arbitrary code. Besides overwriting the instruction pointer, similar results can also be obtained by overwriting other variables and structures, like Exception Handlers, which are located on the stack.

#[References]#
https://www.owasp.org/index.php/Testing_for_Stack_Overflow

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736247</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458715824</created_at></activity></activities></issue><issue><id>2921</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Format string

#[Control]#
OTG-INPVAL-014

#[Status]#
Unknown | Pass | Fail

#[Order]#
70

#[Summary]#
This section describes how to test for format string attacks that can be used to crash a program or to execute harmful code. The problem stems from the use of unfiltered user input as the format string parameter in certain C functions that perform formatting, such as printf().

Various C-Style languages provision formatting of output by means of functions like printf( ), fprintf( ) etc. Formatting is governed by a parameter to these functions termed as format type specifier, typically %s, %c etc. The vulnerability arises when format functions are called with inadequate parameters validation and user controlled data.

A simple example would be printf(argv[1]). In this case the type specifier has not been explicitly declared, allowing a user to pass characters such as %s, %n, %x to the application by means of command line argument argv[1].

This situation tends to become precarious since a user who can supply format specifiers can perform the following malicious actions:

*Enumerate Process Stack:* This allows an adversary to view stack organization of the vulnerable process by supplying format strings, such as %x or %p, which can lead to leakage of sensitive information. It can also be used to extract canary values when the application is protected with a stack protection mechanism. Coupled with a stack overflow, this information can be used to bypass the stack protector.

*Control Execution Flow:* This vulnerability can also facilitate arbitrary code execution since it allows writing 4 bytes of data to an address supplied by the adversary. The specifier %n comes handy for overwriting various function pointers in memory with address of the malicious payload. When these overwritten function pointers get called, execution passes to the malicious code.

*Denial of Service:* If the adversary is not in a position to supply malicious code for execution, the vulnerable application can be crashed by supplying a sequence of %x followed by %n.

#[References]#
https://www.owasp.org/index.php/Testing_for_Format_String

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736266</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458715821</created_at></activity></activities></issue><issue><id>2922</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for incubated vulnerabilities

#[Control]#
OTG-INPVAL-015 

#[Status]#
Unknown | Pass | Fail

#[Order]#
71

#[Summary]#
Also often refered to as persistent attacks, incubated testing is a complex testing method that needs more than one data validation vulnerability to work. Incubated vulnerabilities are typically used to conduct "watering hole" attacks against users of legitimate web applications.

Incubated vulnerabilities have the following characteristics:

* The attack vector needs to be persisted in the first place, it needs to be stored in the persistence layer, and this would only occur if weak data validation was present or the data arrived into the system via another channel such as an admin console or directly via a backend batch process.
* Secondly, once the attack vector was "recalled" the vector would need to be executed successfully. For example, an incubated XSS attack would require weak output validation so the script would be delivered to the client in its executable form.


Exploitation of some vulnerabilities, or even functional features of a web application, will allow an attacker to plant a piece of data that will later be retrieved by an unsuspecting user or other component of the system, exploiting some vulnerability there.

In a penetration test, incubated attacks can be used to assess the criticality of certain bugs, using the particular security issue found to build a client-side based attack that usually will be used to target a large number of victims at the same time (i.e. all users browsing the site).

This type of asynchronous attack covers a great spectrum of attack vectors, among them the following:

* File upload components in a web application, allowing the attacker to upload corrupted media files (jpg images exploiting CVE-2004-0200, png images exploiting CVE-2004-0597, executable files, site pages with active component, etc.)
* Cross-site scripting issues in public forums posts (see Testing for Stored Cross_site scripting (OTG-INPVAL-002) for additional details). An attacker could potentially store malicious scripts or code in a repository in the backend of the web-application (e.g., a database) so that this script/code gets executed by one of the users (end users, administrators, etc). The archetypical incubated attack is exemplified by using a cross-site scripting vulnerability in a user forum, bulletin board, or blog in order to inject some JavaScript code at the vulnerable page, and will be eventually rendered and executed at the site user's browser --using the trust level of the original (vulnerable) site at the user's browser.
* SQL/XPATH Injection allowing the attacker to upload content to a database, which will be later retrieved as part of the active content in a web page. For example, if the attacker can post arbitrary JavaScript in a bulletin board so that it gets executed by users, then he might take control of their browsers (e.g., XSS-proxy).
* Misconfigured servers allowing installation of Java packages or similar web site components (i.e. Tomcat, or web hosting consoles such as Plesk, CPanel, Helm, etc.)

#[References]#
https://www.owasp.org/index.php/Testing_for_Incubated_Vulnerability_(OTG-INPVAL-015)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736317</created_at></activity></activities></issue><issue><id>2923</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for HTTP Splitting/Smuggling

#[Control]#
OTG-INPVAL-016 

#[Status]#
Unknown | Pass | Fail

#[Order]#
72

#[Summary]#
This section illustrates examples of attacks that leverage specific features of the HTTP protocol, either by exploiting weaknesses of the web application or peculiarities in the way different agents interpret HTTP messages. 

This section will analyze two different attacks that target specific HTTP headers:

* HTTP splitting
* HTTP smuggling.


The first attack exploits a lack of input sanitization which allows an intruder to insert CR and LF characters into the headers of the application response and to 'split' that answer into two different HTTP messages. The goal of the attack can vary from a cache poisoning to cross site scripting.

In the second attack, the attacker exploits the fact that some specially crafted HTTP messages can be parsed and interpreted in different ways depending on the agent that receives them. HTTP smuggling requires some level of knowledge about the different agents that are handling the HTTP messages (web server, proxy, firewall) and therefore will be included only in the Gray Box testing section.

#[References]#
https://www.owasp.org/index.php/Testing_for_HTTP_Splitting/Smuggling_(OTG-INPVAL-016)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736338</created_at></activity></activities></issue><issue><id>2924</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Analysis of Error Codes

#[Control]#
OTG-ERR-001 

#[Status]#
Unknown | Pass | Fail

#[Order]#
73

#[Summary]#
Often, during a penetration test on web applications, we come up against many error codes generated from applications or web servers. It's possible to cause these errors to be displayed by using a particular requests, either specially crafted with tools or created manually. These codes are very useful to penetration testers during their activities, because they reveal a lot of information about databases, bugs, and other technological components directly linked with web applications.

This section analyses the more common codes (error messages) and bring into focus their relevance during a vulnerability assessment. The most important aspect for this activity is to focus one's attention on these errors, seeing them as a collection of information that will aid in the next steps of our analysis. A good collection can facilitate assessment efficiency by decreasing the overall time taken to perform the penetration test.

Attackers sometimes use search engines to locate errors that disclose information. Searches can be performed to find any erroneous sites as random victims, or it is possible to search for errors in a specific site using the search engine filtering tools as described in 4.2.1 Conduct Search Engine Discovery and Reconnaissance for Information Leakage (OTG-INFO-001)

#[References]#
https://www.owasp.org/index.php/Testing_for_Error_Code_(OTG-ERR-001)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736358</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458716740</created_at></activity></activities></issue><issue><id>2925</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Analysis of Stack Traces

#[Control]#
OTG-ERR-002 

#[Status]#
Unknown | Pass | Fail

#[Order]#
74

#[Summary]#
Stack traces are not vulnerabilities by themselves, but they often reveal information that is interesting to an attacker. Attackers attempt to generate these stack traces by tampering with the input to the web application with malformed HTTP requests and other input data.

If the application responds with stack traces that are not managed it could reveal information useful to attackers. This information could then be used in further attacks. Providing debugging information as a result of operations that generate errors is considered a bad practice due to multiple reasons. For example, it may contain information on internal workings of the application such as relative paths of the point where the application is installed or how objects are referenced internally.

#[References]#
https://www.owasp.org/index.php/Testing_for_Stack_Traces_(OTG-ERR-002)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736373</created_at></activity><activity><action>update</action><user_email>admin@securityroots.com</user_email><created_at>1458716749</created_at></activity></activities></issue><issue><id>2926</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Weak SSL/TSL Ciphers, Insufficient Transport Layer Protection

#[Control]#
OTG-CRYPST-001 

#[Status]#
Unknown | Pass | Fail

#[Order]#
75

#[Summary]#
Sensitive data must be protected when it is transmitted through the network. Such data can include user credentials and credit cards. As a rule of thumb, if data must be protected when it is stored, it must be protected also during transmission.

HTTP is a clear-text protocol and it is normally secured via an SSL/TLS tunnel, resulting in HTTPS traffic [1]. The use of this protocol ensures not only confidentiality, but also authentication. Servers are authenticated using digital certificates and it is also possible to use client certificate for mutual authentication.

Even if high grade ciphers are today supported and normally used, some misconfiguration in the server can be used to force the use of a weak cipher - or at worst no encryption - permitting to an attacker to gain access to the supposed secure communication channel. Other misconfiguration can be used for a Denial of Service attack.

#[References]#
https://www.owasp.org/index.php/Testing_for_Weak_SSL/TLS_Ciphers,_Insufficient_Transport_Layer_Protection_(OTG-CRYPST-001)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736384</created_at></activity></activities></issue><issue><id>2927</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Padding Oracle

#[Control]#
OTG-CRYPST-002 

#[Status]#
Unknown | Pass | Fail

#[Order]#
76

#[Summary]#
A padding oracle is a function of an application which decrypts encrypted data provided by the client, e.g. internal session state stored on the client, and leaks the state of the validity of the padding after decryption. The existence of a padding oracle allows an attacker to decrypt encrypted data and encrypt arbitrary data without knowledge of the key used for these cryptographic operations. This can lead to leakage of sensible data or to privilege escalation vulnerabilities, if integrity of the encrypted data is assumed by the application.

Block ciphers encrypt data only in blocks of certain sizes. Block sizes used by common ciphers are 8 and 16 bytes. Data where the size doesn't match a multiple of the block size of the used cipher has to be padded in a specific manner so the decryptor is able to strip the padding. A commonly used padding scheme is PKCS#7. It fills the remaining bytes with the value of the padding length.

#[References]#
https://www.owasp.org/index.php/Testing_for_Padding_Oracle_(OTG-CRYPST-002)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736948</created_at></activity></activities></issue><issue><id>2928</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Sensitive information sent via unencrypted channels

#[Control]#
OTG-CRYPST-003 

#[Status]#
Unknown | Pass | Fail

#[Order]#
77

#[Summary]#
Sensitive data must be protected when it is transmitted through the network. If data is transmitted over HTTPS or encrypted in another way the protection mechanism must not have limitations or vulnerabilities, as explained in the broader article Testing for Weak SSL/TLS Ciphers, Insufficient Transport Layer Protection (OTG-CRYPST-001) [1] and in other OWASP documentation [2], [3], [4], [5].

As a rule of thumb if data must be protected when it is stored, this data must also be protected during transmission. Some examples for sensitive data are:

* Information used in authentication (e.g. Credentials, PINs, Session identifiers, Tokens, Cookies…)
* Information protected by laws, regulations or specific organizational policy (e.g. Credit Cards, Customers data)


If the application transmits sensitive information via unencrypted channels - e.g. HTTP - it is considered a security risk. Some examples are Basic authentication which sends authentication credentials in plain-text over HTTP, form based authentication credentials sent via HTTP, or plain-text transmission of any other information considered sensitive due to regulations, laws, organizational policy or application business logic.

#[References]#
https://www.owasp.org/index.php/Testing_for_Sensitive_information_sent_via_unencrypted_channels_(OTG-CRYPST-003)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736975</created_at></activity></activities></issue><issue><id>2929</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Test Business Logic Data Validation

#[Control]#
OTG-BUSLOGIC-001 

#[Status]#
Unknown | Pass | Fail

#[Order]#
78

#[Summary]#
The application must ensure that only logically valid data can be entered at the front end as well as directly to the server side of an application of system. Only verifying data locally may leave applications vulnerable to server injections through proxies or at handoffs with other systems. This is different from simply performing Boundary Value Analysis (BVA) in that it is more difficult and in most cases cannot be simply verified at the entry point, but usually requires checking some other system.

For example: An application may ask for your Social Security Number. In BVA the application should check formats and semantics (is the value 9 digits long, not negative and not all 0's) for the data entered, but there are logic considerations also. SSNs are grouped and categorized. Is this person on a death file? Are they from a certain part of the country?

Vulnerabilities related to business data validation is unique in that they are application specific and different from the vulnerabilities related to forging requests in that they are more concerned about logical data as opposed to simply breaking the business logic workflow.

The front end and the back end of the application should be verifying and validating that the data it has, is using and is passing along is logically valid. Even if the user provides valid data to an application the business logic may make the application behave differently depending on data or circumstances.

#[References]#
https://www.owasp.org/index.php/Test_business_logic_data_validation_(OTG-BUSLOGIC-001)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457736995</created_at></activity></activities></issue><issue><id>2930</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Test Ability to Forge Requests

#[Control]#
OTG-BUSLOGIC-002 

#[Status]#
Unknown | Pass | Fail

#[Order]#
79

#[Summary]#
Forging requests is a method that attackers use to circumvent the front end GUI application to directly submit information for back end processing. The goal of the attacker is to send HTTP POST/GET requests through an intercepting proxy with data values that is not supported, guarded against or expected by the applications business logic. Some examples of forged requests include exploiting guessable or predictable parameters or expose “hidden” features and functionality such as enabling debugging or presenting special screens or windows that are very useful during development but may leak information or bypass the business logic.

Vulnerabilities related to the ability to forge requests is unique to each application and different from business logic data validation in that it s focus is on breaking the business logic workflow.

Applications should have logic checks in place to prevent the system from accepting forged requests that may allow attackers the opportunity to exploit the business logic, process, or flow of the application. Request forgery is nothing new; the attacker uses an intercepting proxy to send HTTP POST/GET requests to the application. Through request forgeries attackers may be able to circumvent the business logic or process by finding, predicting and manipulating parameters to make the application think a process or task has or has not taken place.

Also, forged requests may allow subvention of programmatic or business logic flow by invoking “hidden” features or functionality such as debugging initially used by developers and testers sometimes referred to as an ”Easter egg”. “An Easter egg is an intentional inside joke, hidden message, or feature in a work such as a computer program, movie, book, or crossword. According to game designer Warren Robinett, the term was coined at Atari by personnel who were alerted to the presence of a secret message which had been hidden by Robinett in his already widely distributed game, Adventure. The name has been said to evoke the idea of a traditional Easter egg hunt.” http://en.wikipedia.org/wiki/Easter_egg_(media)

#[References]#
https://www.owasp.org/index.php/Test_Ability_to_forge_requests_(OTG-BUSLOGIC-002)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737006</created_at></activity></activities></issue><issue><id>2959</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Test Integrity Checks 

#[Control]#
OTG-BUSLOGIC-003

#[Status]#
Unknown | Pass | Fail

#[Order]#
80

#[Summary]#
Many applications are designed to display different fields depending on the user of situation by leaving some inputs hidden. However, in many cases it is possible to submit values hidden field values to the server using a proxy. In these cases the server side controls must be smart enough to perform relational or server side edits to ensure that the proper data is allowed to the server based on user and application specific business logic.

Additionally, the application must not depend on non-editable controls, drop-down menus or hidden fields for business logic processing because these fields remain non-editable only in the context of the browsers. Users may be able to edit their values using proxy editor tools and try to manipulate business logic. If the application exposes values related to business rules like quantity, etc. as non-editable fields it must maintain a copy on the server side and use the same for business logic processing. Finally, aside application/system data, log systems must be secured to prevent read, writing and updating.

Business logic integrity check vulnerabilities is unique in that these misuse cases are application specific and if users are able to make changes one should only be able to write or update/edit specific artifacts at specific times per the business process logic.

The application must be smart enough to check for relational edits and not allow users to submit information directly to the server that is not valid, trusted because it came from a non-editable controls or the user is not authorized to submit through the front end. Additionally, system artifacts such as logs must be “protected” from unauthorized read, writing and removal.

#[References]#
https://www.owasp.org/index.php/Test_integrity_checks_(OTG-BUSLOGIC-003)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458714922</created_at></activity></activities></issue><issue><id>2960</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Test for Process Timing

#[Control]#
OTG-BUSLOGIC-004

#[Status]#
Unknown | Pass | Fail

#[Order]#
81

#[Summary]#
It is possible that attackers can gather information on an application by monitoring the time it takes to complete a task or give a respond. Additionally, attackers may be able to manipulate and break designed business process flows by simply keeping active sessions open and not submitting their transactions in the "expected" time frame.

Process timing logic vulnerabilities is unique in that these manual misuse cases should be created considering execution and transaction timing that are application/system specific.

Processing timing may give/leak information on what is being done in the application/system background processes. If an application allows users to guess what the particulate next outcome will be by processing time variations, users will be able to adjust accordingly and change behavior based on the expectation and "game the system".

#[References]#
https://www.owasp.org/index.php/Test_for_Process_Timing_(OTG-BUSLOGIC-004)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458714934</created_at></activity></activities></issue><issue><id>2961</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Test Number of Times a Function Can be Used Limits

#[Control]#
OTG-BUSLOGIC-005

#[Status]#
Unknown | Pass | Fail

#[Order]#
82

#[Summary]#
Many of the problems that applications are solving require limits to the number of times a function can be used or action can be executed. Applications must be “smart enough” to not allow the user to exceed their limit on the use of these functions since in many cases each time the function is used the user may gain some type of benefit that must be accounted for to properly compensate the owner. For example: an eCommerce site may only allow a users apply a discount once per transaction, or some applications may be on a subscription plan and only allow users to download three complete documents monthly.

Vulnerabilities related to testing for the function limits are application specific and misuse cases must be created that strive to exercise parts of the application/functions/ or actions more than the allowable number of times.

Attackers may be able to circumvent the business logic and execute a function more times than “allowable” exploiting the application for personal gain.

#[References]#
https://www.owasp.org/index.php/Test_number_of_times_a_function_can_be_used_limits_(OTG-BUSLOGIC-005)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1458714944</created_at></activity></activities></issue><issue><id>2931</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for the Circumvention of Work Flows

#[Control]#
OTG-BUSLOGIC-006 

#[Status]#
Unknown | Pass | Fail

#[Order]#
83

#[Summary]#
Workflow vulnerabilities involve any type of vulnerability that allows the attacker to misuse an application/system in a way that will allow them to circumvent (not follow) the designed/intended workflow.

“A workflow consists of a sequence of connected steps where each step follows without delay or gap and ends just before the subsequent step may begin. It is a depiction of a sequence of operations, declared as work of a person or group, an organization of staff, or one or more simple or complex mechanisms. Workflow may be seen as any abstraction of real work.” (https://en.wikipedia.org/wiki/Workflow)

The application’s business logic must require that the user complete specific steps in the correct/specific order and if the workflow is terminated without correctly completing, all actions and spawned actions are “rolled back” or canceled. Vulnerabilities related to the circumvention of workflows or bypassing the correct business logic workflow are unique in that they are very application/system specific and careful manual misuse cases must be developed using requirements and use cases.

The applications business process must have checks to ensure that the user's transactions/actions are proceeding in the correct/acceptable order and if a transaction triggers some sort of action, that action will be “rolled back” and removed if the transaction is not successfully completed.

#[References]#
https://www.owasp.org/index.php/Testing_for_the_Circumvention_of_Work_Flows_(OTG-BUSLOGIC-006)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737057</created_at></activity></activities></issue><issue><id>2932</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Test Defenses Against Application Mis-use

#[Control]#
OTG-BUSLOGIC-007 

#[Status]#
Unknown | Pass | Fail

#[Order]#
84

#[Summary]#
The misuse and invalid use of of valid functionality can identify attacks attempting to enumerate the web application, identify weaknesses, and exploit vulnerabilities. Tests should be undertaken to determine whether there are application-layer defensive mechanisms in place to protect the application.

The lack of active defenses allows an attacker to hunt for vulnerabilities without any recourse. The application's owner will thus not know their application is under attack.

#[References]#
https://www.owasp.org/index.php/Test_defenses_against_application_mis-use_(OTG-BUSLOGIC-007)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737070</created_at></activity></activities></issue><issue><id>2933</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Test Upload of Unexpected File Types

#[Control]#
OTG-BUSLOGIC-008 

#[Status]#
Unknown | Pass | Fail

#[Order]#
85

#[Summary]#
Many application’s business processes allow for the upload and manipulation of data that is submitted via files. But the business process must check the files and only allow certain “approved” file types. Deciding what files are "approved" is determined by the business logic and is application/system specific. The risk in that by allowing users to upload files, attackers may submit an unexpected file type that that could be executed and adversely impact the application or system through attacks that may deface the web site, perform remote commands, browse the system files, browse the local resources, attack other servers, or exploit the local vulnerabilities, just to name a few.

Vulnerabilities related to the upload of unexpected file types is unique in that the upload should quickly reject a file if it does not have a specific extension. Additionally, this is different from uploading malicious files in that in most cases an incorrect file format may not by it self be inherently “malicious” but may be detrimental to the saved data. For example if an application accepts Windows Excel files, if an similar database file is uploaded it may be read but data extracted my be moved to incorrect locations.

The application may be expecting only certain file types to be uploaded for processing, such as .CSV, .txt files. The application may not validate the uploaded file by extension (for low assurance file validation) or content (high assurance file validation). This may result in unexpected system or database results within the application/system or give attackers additional methods to exploit the application/system.

#[References]#
https://www.owasp.org/index.php/Test_Upload_of_Unexpected_File_Types_(OTG-BUSLOGIC-008)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737084</created_at></activity></activities></issue><issue><id>2934</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Test Upload of Malicious Files

#[Control]#
OTG-BUSLOGIC-009 

#[Status]#
Unknown | Pass | Fail

#[Order]#
86

#[Summary]#
Many application’s business processes allow for the upload of data/information. We regularly check the validity and security of text but accepting files can introduce even more risk. To reduce the risk we may only accept certain file extensions, but attackers are able to encapsulate malicious code into inert file types. Testing for malicious files verifies that the application/system is able to correctly protect against attackers uploading malicious files.

Vulnerabilities related to the uploading of malicious files is unique in that these “malicious” files can easily be rejected through including business logic that will scan files during the upload process and reject those perceived as malicious. Additionally, this is different from uploading unexpected files in that while the file type may be accepted the file may still be malicious to the system.

Finally, "malicious" means different things to different systems, for example Malicious files that may exploit SQL server vulnerabilities may not be considered a "malicious" to a main frame flat file environment.

The application may allow the upload of malicious files that include exploits or shellcode without submitting them to malicious file scanning. Malicious files could be detected and stopped at various points of the application architecture such as: IPS/IDS, application server anti-virus software or anti-virus scanning by application as files are uploaded (perhaps offloading the scanning using SCAP).

#[References]#
https://www.owasp.org/index.php/Test_Upload_of_Malicious_Files_(OTG-BUSLOGIC-009)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737101</created_at></activity></activities></issue><issue><id>2935</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for DOM based Cross Site Scripting

#[Control]#
OTG-CLIENT-001 

#[Status]#
Unknown | Pass | Fail

#[Order]#
87

#[Summary]#
DOM-based Cross-Site Scripting is the de-facto name for XSS bugs which are the result of active browser-side content on a page, typically JavaScript, obtaining user input and then doing something unsafe with it which leads to execution of injected code. This document only discusses JavaScript bugs which lead to XSS.

The DOM, or Document Object Model, is the structural format used to represent documents in a browser. The DOM enables dynamic scripts such as JavaScript to reference components of the document such as a form field or a session cookie. The DOM is also used by the browser for security - for example to limit scripts on different domains from obtaining session cookies for other domains. A DOM-based XSS vulnerability may occur when active content, such as a JavaScript function, is modified by a specially crafted request such that a DOM element that can be controlled by an attacker.

There have been very few papers published on this topic and, as such, very little standardization of its meaning and formalized testing exists.

#[References]#
https://www.owasp.org/index.php/Testing_for_DOM-based_Cross_site_scripting_(OTG-CLIENT-001)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737142</created_at></activity></activities></issue><issue><id>2936</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for JavaScript Execution

#[Control]#
OTG-CLIENT-002 

#[Status]#
Unknown | Pass | Fail

#[Order]#
88

#[Summary]#
A JavaScript Injection vulnerability is a subtype of Cross Site Scripting (XSS) that involves the ability to inject arbitrary JavaScript code that is executed by the application inside the victim's browser. This vulnerability can have many consequences, like disclosure of a user's session cookies that could be used to impersonate the victim, or, more generally, it can allow the attacker to modify the page content seen by the victims or the application behavior.

#[References]#
https://www.owasp.org/index.php/Testing_for_JavaScript_Execution_(OTG-CLIENT-002)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737155</created_at></activity></activities></issue><issue><id>2937</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for HTML Injection

#[Control]#
OTG-CLIENT-003 

#[Status]#
Unknown | Pass | Fail

#[Order]#
89

#[Summary]#
HTML injection is a type of injection issue that occurs when a user is able to control an input point and is able to inject arbitrary HTML code into a vulnerable web page. This vulnerability can have many consequences, like disclosure of a user's session cookies that could be used to impersonate the victim, or, more generally, it can allow the attacker to modify the page content seen by the victims.

#[References]#
https://www.owasp.org/index.php/Testing_for_HTML_Injection_(OTG-CLIENT-003)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737175</created_at></activity></activities></issue><issue><id>2938</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Client Side URL Redirect

#[Control]#
OTG-CLIENT-004 

#[Status]#
Unknown | Pass | Fail

#[Order]#
90

#[Summary]#
This section describes how to check for Client Side URL Redirection, also known as Open Redirection. It is an input validation flaw that exists when an application accepts an user controlled input which specifies a link that leads to an external URL that could be malicious. This kind of vulnerability could be used to accomplish a phishing attack or redirect a victim to an infection page.

#[References]#
https://www.owasp.org/index.php/Testing_for_Client_Side_URL_Redirect_(OTG-CLIENT-004)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737185</created_at></activity></activities></issue><issue><id>2939</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for CSS Injection

#[Control]#
OTG-CLIENT-005 

#[Status]#
Unknown | Pass | Fail

#[Order]#
91

#[Summary]#
A CSS Injection vulnerability involves the ability to inject arbitrary CSS code in the context of a trusted web site, and this will be rendered inside the victim's browser. The impact of such a vulnerability may vary on the basis of the supplied CSS payload: it could lead to Cross-Site Scripting in particular circumstances, to data exfiltration in the sense of extracting sensitive data or to UI modifications.

#[References]#
https://www.owasp.org/index.php/Testing_for_CSS_Injection_(OTG-CLIENT-005)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737604</created_at></activity></activities></issue><issue><id>2940</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Client Side Resource Manipulation

#[Control]#
OTG-CLIENT-006 

#[Status]#
Unknown | Pass | Fail

#[Order]#
92

#[Summary]#
A Client Side Resource Manipulation vulnerability is an input validation flaw that occurs when an application accepts an user controlled input which specifies the path of a resource (for example the source of an iframe, js, applet or the handler of an XMLHttpRequest). Specifically, such a vulnerability consists in the ability to control the URLs which link to some resources present in a web page. The impact may vary on the basis of the type of the element whose URL is controlled by the attacker, and it is usually adopted to conduct Cross-Site Scripting attacks.

#[References]#
https://www.owasp.org/index.php/Testing_for_Client_Side_Resource_Manipulation_(OTG-CLIENT-006)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737616</created_at></activity></activities></issue><issue><id>2941</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Test Cross Origin Resource Sharing

#[Control]#
OTG-CLIENT-007 

#[Status]#
Unknown | Pass | Fail

#[Order]#
93

#[Summary]#
Cross Origin Resource Sharing or CORS is a mechanism that enables a web browser to perform "cross-domain" requests using the XMLHttpRequest L2 API in a controlled manner. In the past, the XMLHttpRequest L1 API only allowed requests to be sent within the same origin as it was restricted by the same origin policy.

Cross-Origin requests have an Origin header, that identifies the domain initiating the request and is always sent to the server. CORS defines the protocol to use between a web browser and a server to determine whether a cross-origin request is allowed. In order to accomplish this goal, there are a few HTTP headers involved in this process, that are supported by all major browsers and we will cover below including: Origin, Access-Control-Request-Method, Access-Control-Request-Headers, Access-Control-Allow-Origin, Access-Control-Allow-Credentials, Access-Control-Allow-Methods, Access-Control-Allow-Headers.

The CORS specification mandates that for non simple requests, such as requests other than GET or POST or requests that uses credentials, a pre-flight OPTIONS request must be sent in advance to check if the type of request will have a bad impact on the data. The pre-flight request checks the methods, headers allowed by the server, and if credentials are permitted, based on the result of the OPTIONS request, the browser decides whether the request is allowed or not.

#[References]#
https://www.owasp.org/index.php/Test_Cross_Origin_Resource_Sharing_(OTG-CLIENT-007)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737643</created_at></activity></activities></issue><issue><id>2942</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Cross Site Flashing

#[Control]#
OTG-CLIENT-008 

#[Status]#
Unknown | Pass | Fail

#[Order]#
94

#[Summary]#
ActionScript is the language, based on ECMAScript, used by Flash applications when dealing with interactive needs. There are three versions of the ActionScript language. ActionScript 1.0 and ActionScript 2.0 are very similar with ActionScript 2.0 being an extension of ActionScript 1.0. ActionScript 3.0, introduced with Flash Player 9, is a rewrite of the language to support object orientated design.

ActionScript, like every other language, has some implementation patterns which could lead to security issues. In particular, since Flash applications are often embedded in browsers, vulnerabilities like DOM based Cross-Site Scripting (XSS) could be present in flawed Flash applications.

#[References]#
https://www.owasp.org/index.php/Testing_for_Cross_site_flashing_(OTG-CLIENT-008)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737661</created_at></activity></activities></issue><issue><id>2943</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing for Clickjacking

#[Control]#
OTG-CLIENT-009 

#[Status]#
Unknown | Pass | Fail

#[Order]#
95

#[Summary]#
Clickjacking" (which is a subset of the "UI redressing") is a malicious technique that consists of deceiving a web user into interacting (in most cases by clicking) with something different to what the user believes they are interacting with. This type of attack, that can be used alone or in combination with other attacks, could potentially send unauthorized commands or reveal confidential information while the victim is interacting on seemingly harmless web pages. The term "Clickjacking" was coined by Jeremiah Grossman and Robert Hansen in 2008.

A Clickjacking attack uses seemingly innocuous features of HTML and Javascript to force the victim to perform undesired actions, such as clicking on a button that appears to perform another operation. This is a "client side" security issue that affects a variety of browsers and platforms.

To carry out this type of technique the attacker has to create a seemingly harmless web page that loads the target application through the use of an iframe (suitably concealed through the use of CSS code). Once this is done, the attacker could induce the victim to interact with his fictitious web page by other means (like for example social engineering). Like others attacks, an usual prerequisite is that the victim is authenticated against the attacker's target website.

Once the victim is surfing on the fictitious web page, he thinks that he is interacting with the visible user interface, but effectively he is performing actions on the hidden page. Since the hidden page is an authentic page, the attacker can deceive users into performing actions which they never intended to perform through an "ad hoc" positioning of the elements in the web page.

The power of this method is due to the fact that the actions performed by the victim are originated from the authentic target web page (hidden but authentic). Consequently some of the anti-CSRF protections, that are deployed by the developers to protect the web page from CSRF attacks, could be bypassed.

#[References]#
https://www.owasp.org/index.php/Testing_for_Clickjacking_(OTG-CLIENT-009)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737682</created_at></activity></activities></issue><issue><id>2944</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Testing WebSockets

#[Control]#
OTG-CLIENT-010 

#[Status]#
Unknown | Pass | Fail

#[Order]#
96

#[Summary]#
Traditionally the HTTP protocol only allows one request/response per TCP connection. Asynchronous JavaScript and XML (AJAX) allows clients to send and receive data asynchronously (in the background without a page refresh) to the server, however, AJAX requires the client to initiate the requests and wait for the server responses (half-duplex).

HTML5 WebSockets allow the client/server to create a 'full-duplex' (two-way) communication channels, allowing the client and server to truly communicate asynchronously. WebSockets conduct their initial 'upgrade' handshake over HTTP and from then on all communication is carried out over TCP channels by use of frames.

#[References]#
https://www.owasp.org/index.php/Testing_WebSockets_(OTG-CLIENT-010)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737716</created_at></activity></activities></issue><issue><id>2945</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Test Web Messaging

#[Control]#
OTG-CLIENT-011 

#[Status]#
Unknown | Pass | Fail

#[Order]#
97

#[Summary]#
Web Messaging (also known as Cross Document Messaging) allows applications running on different domains to communicate in a secure manner. Before the introduction of web messaging the communication of different origins (between iframes, tabs and windows) was restricted by the same origin policy and enforced by the browser, however developers used multiple hacks in order to accomplish these tasks, most of them were mainly insecure.

This restriction within the browser is in place to restrict a malicious website to read confidential data from other iframes, tabs, etc, however there are some legitimate cases where two trusted websites need to exchange data between each other. To meet this need, Cross Document Messaging was introduced within the WHATWG HTML5 draft specification and was implemented in all major browsers. It enables secure communications between multiple origins across iframes, tabs and windows.

The Messaging API introduced the postMessage() method, with which plain-text messages can be sent cross-origin. It consists of two parameters, message and domain.

There are some security concerns when using '*' as the domain that we discuss below. Then, in order to receive messages the receiving website needs to add a new event handler, and has the following attributes:

* data: The content of the incoming message
* origin: The origin of the sender document
* source: source window


An example:

bc.. Send message:

iframe1.contentWindow.postMessage(“Hello world”,”http://www.example.com”);

Receive message:

window.addEventListener(“message”, handler, true);
function handler(event) {
if(event.origin === 'chat.example.com') {
     /* process message (event.data) */
} else {
    /* ignore messages from untrusted domains */
}
}

#[References]#
https://www.owasp.org/index.php/Test_Web_Messaging_(OTG-CLIENT-011)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737726</created_at></activity></activities></issue><issue><id>2946</id><author>admin@securityroots.com</author><text><![CDATA[#[Title]#
Test Local Storage

#[Control]#
OTG-CLIENT-012 

#[Status]#
Unknown | Pass | Fail

#[Order]#
98

#[Summary]#
Local Storage also known as Web Storage or Offline Storage is a mechanism to store data as key/value pairs tied to a domain and enforced by the same origin policy (SOP). There are two objects, localStorage that is persistent and is intended to survive browser/system reboots and sessionStorage that is temporary and will only exists until the window or tab is closed.

On average browsers allow to store in this storage around 5MB per domain, that compared to the 4KB of cookies is a big difference, but the key difference from the security perspective is that the data stored in these two objects is kept in the client and never sent to the server, this also improves network performance as data do not need to travel over the wire back and forth.

#[References]#
https://www.owasp.org/index.php/Test_Local_Storage_(OTG-CLIENT-012)

]]></text><activities><activity><action>create</action><user_email>admin@securityroots.com</user_email><created_at>1457737738</created_at></activity></activities></issue></issues><methodologies></methodologies><categories><category><id>4</id><name>Issue description</name></category><category><id>6</id><name>Default category</name></category><category><id>1</id><name>AdvancedWordExport ready</name></category></categories><tags><tag><id>403</id><name>!9467bd_unknown</name><taggings><tagging><taggable-id>2924</taggable-id><taggable-type>Note</taggable-type></tagging><tagging><taggable-id>2867</taggable-id><taggable-type>Note</taggable-type></tagging><tagging><taggable-id>2869</taggable-id><taggable-type>Note</taggable-type></tagging><tagging><taggable-id>2880</taggable-id><taggable-type>Note</taggable-type></tagging><tagging><taggable-id>2875</taggable-id><taggable-type>Note</taggable-type></tagging><tagging><taggable-id>2877</taggable-id><taggable-type>Note</taggable-type></tagging><tagging><taggable-id>2879</taggable-id><taggable-type>Note</taggable-type></tagging></taggings></tag><tag><id>404</id><name>!d62728_failed</name><taggings><tagging><taggable-id>2868</taggable-id><taggable-type>Note</taggable-type></tagging><tagging><taggable-id>2871</taggable-id><taggable-type>Note</taggable-type></tagging><tagging><taggable-id>2873</taggable-id><taggable-type>Note</taggable-type></tagging><tagging><taggable-id>2874</taggable-id><taggable-type>Note</taggable-type></tagging><tagging><taggable-id>2876</taggable-id><taggable-type>Note</taggable-type></tagging><tagging><taggable-id>2878</taggable-id><taggable-type>Note</taggable-type></tagging></taggings></tag><tag><id>405</id><name>!2ca02c_passed</name><taggings><tagging><taggable-id>2864</taggable-id><taggable-type>Note</taggable-type></tagging><tagging><taggable-id>2865</taggable-id><taggable-type>Note</taggable-type></tagging><tagging><taggable-id>2866</taggable-id><taggable-type>Note</taggable-type></tagging><tagging><taggable-id>2870</taggable-id><taggable-type>Note</taggable-type></tagging><tagging><taggable-id>2872</taggable-id><taggable-type>Note</taggable-type></tagging><tagging><taggable-id>2925</taggable-id><taggable-type>Note</taggable-type></tagging></taggings></tag></tags></dradis-template>